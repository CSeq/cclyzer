////////////////////////
// Landingpad Clauses //
////////////////////////

landingpad_instruction:clause:catch_tmp[Insn, Index] = Constant -> 
   landingpad_instruction(Insn), index(Index), global_variable(Constant).

landingpad_instruction:clause:filter_tmp[Insn, Index] = Constant -> 
   landingpad_instruction(Insn), index(Index), immediate(Constant).


clause(Clause),
clause:by_index[Insn, Index] = Clause,
catch_clause:arg[Clause] = Constant,
landingpad_instruction:clause[Insn, Index] = Clause <-
   landingpad_instruction:clause:catch_tmp[Insn, I] = Constant,
   index:value(I:Index).

clause(Clause),
clause:by_index[Insn, Index] = Clause,
filter_clause:arg[Clause] = Constant,
landingpad_instruction:clause[Insn, Index] = Clause <-
   landingpad_instruction:clause:filter_tmp[Insn, I] = Constant,
   index:value(I:Index).

///////////////////////////
// Pseudo-index entities //
///////////////////////////

index(Index), index:value(Index:Value) -> int[64](Value).

// struct_type
struct_type:field_tmp[Type, Index] = Field ->
   struct_type(Type), index(Index), type(Field).

struct_type:field[Type, Index] = Field <-
   struct_type:field_tmp[Type, I] = Field,
   index:value(I:Index).

// function_type
function_type:param_tmp[Type, Index] = Param ->
   function_type(Type), index(Index), type(Param).

function_type:param[Type, Index] = Param <-
   function_type:param_tmp[Type, I] = Param,
   index:value(I:Index).

// function formal parameters
function:param_tmp[Func, Index] = Param ->
   function(Func), index(Index), variable(Param).

function:param[Func, Index] = Param <-
   function:param_tmp[Func, I] = Param,
   index:value(I:Index).

// indirectbr_instruction
indirectbr_instruction:label_tmp[Insn, Index] = Label ->
   indirectbr_instruction(Insn), index(Index), variable(Label).

indirectbr_instruction:label[Insn, Index] = Label <-
   indirectbr_instruction:label_tmp[Insn, I] = Label,
   index:value(I:Index).

// switch_instruction
switch_instruction:case:value_tmp[Insn, Index] = Value ->
   switch_instruction(Insn), index(Index), immediate(Value).

switch_instruction:case:value[Insn, Index] = Value <-
   switch_instruction:case:value_tmp[Insn, I] = Value,
   index:value(I:Index).

switch_instruction:case:label_tmp[Insn, Index] = Label ->
   switch_instruction(Insn), index(Index), variable(Label).

switch_instruction:case:label[Insn, Index] = Label <-
   switch_instruction:case:label_tmp[Insn, I] = Label,
   index:value(I:Index).

// extractvalue_instruction
extractvalue_instruction:index_tmp[Insn, Index] = Idx ->
   extractvalue_instruction(Insn), index(Index), immediate(Idx).

extractvalue_instruction:index[Insn, Index] = Idx <-
   extractvalue_instruction:index_tmp[Insn, I] = Idx,
   index:value(I:Index).

// insertvalue_instruction
insertvalue_instruction:index_tmp[Insn, Index] = Idx ->
   insertvalue_instruction(Insn), index(Index), immediate(Idx).

insertvalue_instruction:index[Insn, Index] = Idx <-
   insertvalue_instruction:index_tmp[Insn, I] = Idx,
   index:value(I:Index).

// phi_instruction
phi_instruction:pair:label_tmp[Insn, Index] = Label ->
   phi_instruction(Insn), index(Index), variable(Label).

phi_instruction:pair:label[Insn, Index] = Label <-
   phi_instruction:pair:label_tmp[Insn, I] = Label,
   index:value(I:Index).
