// Types
Type(type), Type:Value(type:name) -> string(name).
PrimitiveType(type) -> Type(type).
DerivedType(type) -> Type(type).
AggregateType(type) -> DerivedType(type).
ArrayType(type) -> AggregateType(type).
PointerType(type) -> DerivedType(type).
FunctionType(type) -> DerivedType(type).
StructType(type) -> AggregateType(type).
VectorType(type) -> DerivedType(type).
IntegerType(type) -> PrimitiveType(type).
FloatingPointType(type) -> PrimitiveType(type).
Int1Type[] = type -> IntegerType(type).
Int8Type[] = type -> IntegerType(type).
Int32Type[] = type -> IntegerType(type).
Int64Type[] = type -> IntegerType(type).
DoubleType[] = type -> FloatingPointType(type).
FloatType[] = type -> FloatingPointType(type).
HalfType[] = type -> FloatingPointType(type).
Fp128Type[] = type -> FloatingPointType(type).
VoidType[] = type -> PrimitiveType(type).
LabelType[] = type -> PrimitiveType(type).
MetaDataType[] = type -> PrimitiveType(type).

//Pointer Type
PointerType:Component[type] = componentType -> PointerType(type), Type(componentType).

//Function Type
FunctionType:Return[type] = return -> FunctionType(type), Type(return).
FunctionType:Arg[type, index] = arg -> FunctionType(type), int[64](index), Type(arg).
FunctionType:nArgs[type] = total -> FunctionType(type), int[64](total).

// Function
Function(func), Function:id(func:id) -> string(id).

Function:Name[func] = name -> Function(func), string(name).
Function:Type[func] = type -> Function(func), FunctionType(type).
Function:Arg[func, index] = arg -> Function(func), int[64](index), Variable(arg).

Function:nArgs[func] = total -> Function(func), int[64](total).
Function:nArgs[func] = total
<- 
   Function:Type[func] = type,
   FunctionType:nArgs[type] = total.

Function:Type[func] = type, 
FunctionType:Arg[type, index] = argType,
Function:Arg[func, index] = arg
->
   Variable:Type[arg] = argType.


// Array Type
ArrayType:Component[type] = componentType -> ArrayType(type), Type(componentType).
ArrayType:Size[type] = size -> ArrayType(type), int[64](size).

// Vector Type
VectorType:Component[type] = componentType -> VectorType(type), Type(componentType).
VectorType:Size[type] = size -> VectorType(type), int[64](size).

// Struct Type
StructType:Field[type, index] = field -> StructType(type), int[64](index), Type(field).
StructType:nFields[type] = total -> StructType(type), int[64](total).

// Standard types as constants
Int1Type[] = type <- IntegerType(type), Type:Value(type:"i1").
Int8Type[] = type <- IntegerType(type), Type:Value(type:"i8").
Int32Type[] = type <- IntegerType(type), Type:Value(type:"i32").
Int64Type[] = type <- IntegerType(type), Type:Value(type:"i64").
DoubleType[] = type <- FloatingPointType(type), Type:Value(type:"double").
FloatType[] = type <- FloatingPointType(type), Type:Value(type:"float").
HalfType[] = type <- FloatingPointType(type), Type:Value(type:"half").
Fp128Type[] = type <- FloatingPointType(type), Type:Value(type:"fp128").
VoidType[] = type <- PrimitiveType(type), Type:Value(type:"void").
LabelType[] = type <- PrimitiveType(type), Type:Value(type:"label").
MetadataType[] = type <- PrimitiveType(type), Type:Value(type:"metadata").

Variable(var), Variable:Id(var:id) -> string(id).
Variable:Type[var] = type -> Variable(var), Type(type).
Immediate(imm), Immediate:Value(imm:value) -> string(value).
Immediate:Type[imm] = type -> Immediate(imm), Type(type).

// Instructions
Instruction(insn), Instruction:Value(insn:id) -> string(id).
Instruction:Type[insn] = type -> Instruction(insn), Type(type).
Instruction:To[insn] = to -> Instruction(insn), Variable(to).

// Terminator Instructions
RetInstruction(insn) -> Instruction(insn).
SwitchInstruction(insn) -> Instruction(insn).
IndirectBrInstruction(insn) -> Instruction(insn).
ResumeInstruction(insn) -> Instruction(insn).
UnreachableInstruction(insn) -> Instruction(insn).

// Binary Operations
AddInstruction(insn) -> Instruction(insn).
SubInstruction(insn) -> Instruction(insn).
MulInstruction(insn) -> Instruction(insn).
FAddInstruction(insn) -> Instruction(insn).
FSubInstruction(insn) -> Instruction(insn).
FMulInstruction(insn) -> Instruction(insn).
UDivInstruction(insn) -> Instruction(insn).
SDivInstruction(insn) -> Instruction(insn).
FDivInstruction(insn) -> Instruction(insn).
URemInstruction(insn) -> Instruction(insn).
SRemInstruction(insn) -> Instruction(insn).
FRemInstruction(insn) -> Instruction(insn).

// Bitwise Binary Operations
ShlInstruction(insn) -> Instruction(insn).
LshrInstruction(insn) -> Instruction(insn).
AshrInstruction(insn) -> Instruction(insn).
AndInstruction(insn) -> Instruction(insn).
OrInstruction(insn) -> Instruction(insn).
XorInstruction(insn) -> Instruction(insn).

// Memory Operations
AllocaInstruction(insn) -> Instruction(insn).
LoadInstruction(insn) -> Instruction(insn).
StoreInstruction(insn) -> Instruction(insn).
//FenceInstruction(insn) -> Instruction(insn).
AtomicCmpXchgInstruction(insn) -> Instruction(insn).
AtomicRMWInstruction(insn) -> Instruction(insn).
GepInstruction(insn) -> Instruction(insn).

// Conversion Operations
TruncInstruction(insn) -> Instruction(insn).
ZExtInstruction(insn) -> Instruction(insn).
SExtInstruction(insn) -> Instruction(insn).
FPTruncInstruction(insn) -> Instruction(insn).
FPExtInstruction(insn) -> Instruction(insn).
FPToUIInstruction(insn) -> Instruction(insn).
FPToSIInstruction(insn) -> Instruction(insn).
UIToFPInstruction(insn) -> Instruction(insn). 
SIToFPInstruction(insn) -> Instruction(insn).
PtrToIntInstruction(insn) -> Instruction(insn).
IntToPtrInstruction(insn) -> Instruction(insn).
BitCastInstruction(insn) -> Instruction(insn).

// Other
IcmpInstruction(insn) -> Instruction(insn).
PhiInstruction(insn) -> Instruction(insn).
SelectInstruction(insn) -> Instruction(insn).
VAArgInstruction(insn) -> Instruction(insn).

// Operand as union
Operand(operand) -> .
Operand:byVariable[var] = operand -> Variable(var), Operand(operand).
Operand:byImmediate[imm] = operand -> Immediate(imm), Operand(operand).

lang:physical:storageModel[`Operand] = "ScalableSparse".
lang:constructor(`Operand:byVariable).
lang:constructor(`Operand:byImmediate).

// Add Instruction
AddInstruction:LeftOperand[insn] = left -> AddInstruction(insn), Operand(left).
AddInstruction:RightOperand[insn] = right -> AddInstruction(insn), Operand(right).

Instruction:Type[insn] = type -> AddInstruction(insn), type = Int32Type[]; VectorType(type).
Instruction:Type[_] = type, VectorType:Component[type] = comp -> Int32Type[] = comp.

AddInstruction:LeftOperand[_] = left, 
Operand:byVariable[var] = left, 
Variable:Type[var] = type 
-> 
   type = Int32Type[]; VectorType(type).

AddInstruction:LeftOperand[_] = left,
Operand:byVariable[var] = left,
Variable:Type[var] = type, VectorType:Component[type] = comp -> Int32Type[] = comp.

AddInstruction:LeftOperand[_] = left, 
Operand:byImmediate[imm] = left, 
Immediate:Type[imm] = type 
-> 
   type = Int32Type[].

// Sub Instruction
SubInstruction:LeftOperand[insn] = left -> SubInstruction(insn), Operand(left).
SubInstruction:RightOperand[insn] = right -> SubInstruction(insn), Operand(right).

// Mul Instruction
MulInstruction:LeftOperand[insn] = left -> MulInstruction(insn), Operand(left).
MulInstruction:RightOperand[insn] = right -> MulInstruction(insn), Operand(right).

// FAdd Instruction
FAddInstruction:LeftOperand[insn] = left -> FAddInstruction(insn), Operand(left).
FAddInstruction:RightOperand[insn] = right -> FAddInstruction(insn), Operand(right).

// FSub Instruction
FSubInstruction:LeftOperand[insn] = left -> FSubInstruction(insn), Operand(left).
FSubInstruction:RightOperand[insn] = right -> FSubInstruction(insn), Operand(right).

// FMul Instruction
FMulInstruction:LeftOperand[insn] = left -> FMulInstruction(insn), Operand(left).
FMulInstruction:RightOperand[insn] = right -> FMulInstruction(insn), Operand(right).

// UDiv Instruction
UDivInstruction:LeftOperand[insn] = left -> UDivInstruction(insn), Operand(left).
UDivInstruction:RightOperand[insn] = right -> UDivInstruction(insn), Operand(right).

// SDiv Instruction
SDivInstruction:LeftOperand[insn] = left -> SDivInstruction(insn), Operand(left).
SDivInstruction:RightOperand[insn] = right -> SDivInstruction(insn), Operand(right).

// FDiv Instruction
FDivInstruction:LeftOperand[insn] = left -> FDivInstruction(insn), Operand(left).
FDivInstruction:RightOperand[insn] = right -> FDivInstruction(insn), Operand(right).

// URem Instruction
URemInstruction:LeftOperand[insn] = left -> URemInstruction(insn), Operand(left).
URemInstruction:RightOperand[insn] = right -> URemInstruction(insn), Operand(right).

// SRem Instruction
SRemInstruction:LeftOperand[insn] = left -> SRemInstruction(insn), Operand(left).
SRemInstruction:RightOperand[insn] = right -> SRemInstruction(insn), Operand(right).

// FRem Instruction
FRemInstruction:LeftOperand[insn] = left -> FRemInstruction(insn), Operand(left).
FRemInstruction:RightOperand[insn] = right -> FRemInstruction(insn), Operand(right).

// Shl Instruction
ShlInstruction:LeftOperand[insn] = left -> ShlInstruction(insn), Operand(left).
ShlInstruction:RightOperand[insn] = left -> ShlInstruction(insn), Operand(left).

// Lshr Instruction
LshrInstruction:LeftOperand[insn] = left -> LshrInstruction(insn), Operand(left).
LshrInstruction:RightOperand[insn] = left -> LshrInstruction(insn), Operand(left).

// Ashr Instruction
AshrInstruction:LeftOperand[insn] = left -> AshrInstruction(insn), Operand(left).
AshrInstruction:RightOperand[insn] = left -> AshrInstruction(insn), Operand(left).

// And Instruction
AndInstruction:LeftOperand[insn] = left -> AndInstruction(insn), Operand(left).
AndInstruction:RightOperand[insn] = left -> AndInstruction(insn), Operand(left).

//Or Instruction
OrInstruction:LeftOperand[insn] = left -> OrInstruction(insn), Operand(left).
OrInstruction:RightOperand[insn] = left -> OrInstruction(insn), Operand(left).

// Xor Instruction
XorInstruction:LeftOperand[insn] = left -> XorInstruction(insn), Operand(left).
XorInstruction:RightOperand[insn] = left -> XorInstruction(insn), Operand(left).

// Alloca Instruction
AllocaInstruction:Size:Type[insn] = type -> AllocaInstruction(insn), IntegerType(type).
AllocaInstruction:Size:Value[insn] = size -> AllocaInstruction(insn), Operand(size).
AllocaInstruction:Align[insn] = alignment -> AllocaInstruction(insn), Immediate(alignment).

//Load Instruction
LoadInstruction:Operand[insn] = operand -> LoadInstruction(insn), Variable(operand).
LoadInstruction:Align[insn] = alignment -> LoadInstruction(insn), Immediate(alignment).

LoadInstruction:Operand[_] = _, Variable:Type[_] = type -> PointerType(type).

//Store Instruction
StoreInstruction:LeftOperand[insn] = left -> StoreInstruction(insn), Operand(left).
StoreInstruction:RightOperand[insn] = right -> StoreInstruction(insn), Variable(right).
StoreInstruction:Align[insn] = alignment -> StoreInstruction(insn), Immediate(alignment).

Instruction:To[insn] = _ -> !StoreInstruction(insn).
Instruction:Type[insn] = type -> StoreInstruction(insn), type = VoidType[].
StoreInstruction:RightOperand[_] = _, Variable:Type[_] = type -> PointerType(type).

// fence
// fence [singlethread] <ordering>

// AtomicCmpXchg Instruction
AtomicCmpXchgInstruction:FirstOperand[insn] = first -> AtomicCmpXchgInstruction(insn), Operand(first).
AtomicCmpXchgInstruction:SecondOperand[insn] = second -> AtomicCmpXchgInstruction(insn), Operand(second).
AtomicCmpXchgInstruction:ThirdOperand[insn] = third -> AtomicCmpXchgInstruction(insn), Operand(third).

Instruction:Type[insn] = type -> AtomicCmpXchgInstruction(insn), IntegerType(type).

AtomicCmpXchgInstruction:FirstOperand[_] = first, 
Operand:byVariable[var] = first, 
Variable:Type[var] = type 
-> 
   PointerType(type).

AtomicCmpXchgInstruction:FirstOperand[_] = first, 
Operand:byImmediate[imm] = first, 
Immediate:Type[imm] = type 
-> 
   PointerType(type).

AtomicCmpXchgInstruction:FirstOperand[_] = first,
Operand:byVariable[var] = first,
Variable:Type[var] = type, PointerType:Component[type] = comp -> IntegerType(comp).

AtomicCmpXchgInstruction:FirstOperand[_] = first,
Operand:byImmediate[var] = first,
Immediate:Type[var] = type, PointerType:Component[type] = comp -> IntegerType(comp).

AtomicCmpXchgInstruction:FirstOperand[_] = second, 
Operand:byVariable[var] = second, 
Variable:Type[var] = type 
-> 
   IntegerType(type).

AtomicCmpXchgInstruction:FirstOperand[_] = second, 
Operand:byImmediate[imm] = second, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type).

AtomicCmpXchgInstruction:FirstOperand[_] = third, 
Operand:byVariable[var] = third, 
Variable:Type[var] = type 
-> 
   IntegerType(type).

AtomicCmpXchgInstruction:FirstOperand[_] = third, 
Operand:byImmediate[imm] = third, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type).

// AtomicRMW Instruction
AtomicRMWInstruction:Operation[insn] = operation -> AtomicRMWInstruction(insn), string(operation).
AtomicRMWInstruction:LeftOperand[insn] = left -> AtomicRMWInstruction(insn), Operand(left).
AtomicRMWInstruction:RightOperand[insn] = right -> AtomicRMWInstruction(insn), Operand(right).

Instruction:Type[insn] = type -> AtomicRMWInstruction(insn), IntegerType(type).

AtomicRMWInstruction:LeftOperand[_] = left, 
Operand:byVariable[var] = left, 
Variable:Type[var] = type 
-> 
   PointerType(type).

AtomicRMWInstruction:LeftOperand[_] = left, 
Operand:byImmediate[imm] = left, 
Immediate:Type[imm] = type 
-> 
   PointerType(type).

AtomicRMWInstruction:LeftOperand[_] = left,
Operand:byVariable[var] = left,
Variable:Type[var] = type, PointerType:Component[type] = comp -> IntegerType(comp).

AtomicRMWInstruction:LeftOperand[_] = left,
Operand:byImmediate[var] = left,
Immediate:Type[var] = type, PointerType:Component[type] = comp -> IntegerType(comp).

AtomicRMWInstruction:RightOperand[_] = right, 
Operand:byVariable[var] = right, 
Variable:Type[var] = type 
-> 
   IntegerType(type).

AtomicRMWInstruction:RightOperand[_] = right, 
Operand:byImmediate[imm] = right, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type).

//Gep Instruction
GepInstruction:Base[insn] = base -> GepInstruction(insn), Variable(base).
GepInstruction:LeftIndex[insn] = lvalue -> GepInstruction(insn), Operand(lvalue).
GepInstruction:RightIndex[insn] = rvalue -> GepInstruction(insn), Operand(rvalue).

//Trunc Instruction
TruncInstruction:LeftOperand[insn] = value -> TruncInstruction(insn), Operand(value).
TruncInstruction:RightOperand:Type[insn] = type -> TruncInstruction(insn), Type(type).

Instruction:Type[insn] = type -> TruncInstruction(insn), IntegerType(type); VectorType(type).
Instruction:Type[_] = type, VectorType:Component[type] = comp -> IntegerType(comp).

TruncInstruction:LeftOperand[_] = value, 
Operand:byVariable[var] = value, 
Variable:Type[var] = type 
-> 
   IntegerType(type); VectorType(type).

TruncInstruction:LeftOperand[_] = left,
Operand:byVariable[var] = left,
Variable:Type[var] = type, VectorType:Component[type] = comp -> IntegerType(comp).

TruncInstruction:LeftOperand[_] = value, 
Operand:byImmediate[imm] = value, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type).

TruncInstruction:RightOperand:Type[_] = type -> IntegerType(type); VectorType(type). 
TruncInstruction:RightOperand:Type[_] = type, VectorType:Component[type] = comp -> IntegerType(comp).


//ZExt Instruction
ZExtInstruction:LeftOperand[insn] = value -> ZExtInstruction(insn), Operand(value).
ZExtInstruction:RightOperand:Type[insn] = type -> ZExtInstruction(insn), Type(type).

//SExt Instruction
SExtInstruction:LeftOperand[insn] = value -> SExtInstruction(insn), Operand(value).
SExtInstruction:RightOperand:Type[insn] = type -> SExtInstruction(insn), Type(type).

//FPTrunc Instruction
FPTruncInstruction:LeftOperand[insn] = value -> FPTruncInstruction(insn), Operand(value).
FPTruncInstruction:RightOperand:Type[insn] = type -> FPTruncInstruction(insn), FloatingPointType(type).

// FPExt Instruction
FPExtInstruction:LeftOperand[insn] = value -> FPExtInstruction(insn), Operand(value).
FPExtInstruction:RightOperand:Type[insn] = type -> FPExtInstruction(insn), IntegerType(type).

// FPToUI Instruction
FPToUIInstruction:LeftOperand[insn] = value -> FPToUIInstruction(insn), Operand(value).
FPToUIInstruction:RightOperand:Type[insn] = type -> FPToUIInstruction(insn), IntegerType(type).

// FPToSI Instruction
FPToSIInstruction:LeftOperand[insn] = value -> FPToSIInstruction(insn), Operand(value).
FPToSIInstruction:RightOperand:Type[insn] = type -> FPToSIInstruction(insn), IntegerType(type).

// UIToFP Instruction
UIToFPInstruction:LeftOperand[insn] = value -> UIToFPInstruction(insn), Operand(value).
UIToFPInstruction:RightOperand:Type[insn] = type -> UIToFPInstruction(insn), FloatingPointType(type).

// SIToFP Instruction
SIToFPInstruction:LeftOperand[insn] = value -> SIToFPInstruction(insn), Operand(value).
SIToFPInstruction:RightOperand:Type[insn] = type -> SIToFPInstruction(insn), FloatingPointType(type).

// PtrToInt Instruction
PtrToIntInstruction:LeftOperand[insn] = value -> PtrToIntInstruction(insn), Operand(value).
PtrToIntInstruction:RightOperand:Type[insn] = type -> PtrToIntInstruction(insn), IntegerType(type).

// IntTo PtrInstruction
IntToPtrInstruction:LeftOperand[insn] = value -> IntToPtrInstruction(insn), Operand(value).
IntToPtrInstruction:RightOperand:Type[insn] = type -> IntToPtrInstruction(insn), PointerType(type).

// BitCast Instruction
BitCastInstruction:LeftOperand[insn] = value -> BitCastInstruction(insn), Operand(value).
BitCastInstruction:RightOperand:Type[insn] = type -> BitCastInstruction(insn), Type(type).

//Icmp Instruction
IcmpInstruction:Cond[insn] = cond -> IcmpInstruction(insn), string(cond).
IcmpInstruction:LeftOperand[insn] = left -> IcmpInstruction(insn), Operand(left).
IcmpInstruction:RightOperand[insn] = right -> IcmpInstruction(insn), Operand(right).

Instruction:Type[insn] = type -> IcmpInstruction(insn), Int1Type[] = type; VectorType(type).
Instruction:Type[_] = type, VectorType:Component[type] = comp -> Int1Type[] = comp.

// left
IcmpInstruction:LeftOperand[_] = left, 
Operand:byVariable[var] = left, 
Variable:Type[var] = type 
-> 
   IntegerType(type); PointerType(type); VectorType(type).

IcmpInstruction:LeftOperand[_] = left,
Operand:byVariable[var] = left,
Variable:Type[var] = type, VectorType:Component[type] = comp -> IntegerType(comp); PointerType(type).

IcmpInstruction:LeftOperand[_] = left, 
Operand:byImmediate[imm] = left, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type); PointerType(type).

// right
IcmpInstruction:RightOperand[_] = right, 
Operand:byVariable[var] = right, 
Variable:Type[var] = type 
-> 
   IntegerType(type); PointerType(type); VectorType(type).

IcmpInstruction:RightOperand[_] = right,
Operand:byVariable[var] = right,
Variable:Type[var] = type, VectorType:Component[type] = comp -> IntegerType(comp); PointerType(type).

IcmpInstruction:RightOperand[_] = right, 
Operand:byImmediate[imm] = right, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type); PointerType(type).

// Phi Instruction

// Select Instruction
SelectInstruction:Cond[insn] = cond -> Instruction(insn), Operand(cond).
SelectInstruction:LeftOperand[insn] = left -> Instruction(insn), Operand(left).
SelectInstruction:RightOperand[insn] = right -> Instruction(insn), Operand(right).

SelectInstruction:Cond[_] = cond,
Operand:byVariable[var] = cond, 
Variable:Type[var] = type 
-> 
   Int1Type[] = type; VectorType(type).

SelectInstruction:Cond[_] = cond,
Operand:byVariable[var] = cond,
Variable:Type[var] = type, VectorType:Component[type] = comp -> Int1Type[] = comp.

SelectInstruction:Cond[_] = cond,
Operand:byImmediate[imm] = cond, 
Immediate:Type[imm] = type 
-> 
   Int1Type[] = type.

// VAArg Instruction
VAArgInstruction:LeftOperand[insn] = left -> Instruction(insn), Variable(left).
VAArgInstruction:RightOperandType[insn] = right -> Instruction(insn), Type(right).

VAArgInstruction:LeftOperand[_] =  _, Variable:Type[_] = type -> PointerType(type).



