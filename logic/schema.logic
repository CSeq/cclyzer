// Types
Type(type), Type:Value(type:name) -> string(name).
PrimitiveType(type) -> Type(type).
DerivedType(type) -> Type(type).
AggregateType(type) -> DerivedType(type).
ArrayType(type) -> AggregateType(type).
PointerType(type) -> DerivedType(type).
FunctionType(type) -> DerivedType(type).
StructType(type) -> AggregateType(type).
OpaqueStructType(type) -> StructType(type).
VectorType(type) -> DerivedType(type).
IntegerType(type) -> PrimitiveType(type).
FloatingPointType(type) -> PrimitiveType(type).
Int1Type[] = type -> IntegerType(type).
Int8Type[] = type -> IntegerType(type).
Int32Type[] = type -> IntegerType(type).
Int64Type[] = type -> IntegerType(type).
DoubleType[] = type -> FloatingPointType(type).
FloatType[] = type -> FloatingPointType(type).
HalfType[] = type -> FloatingPointType(type).
Fp128Type[] = type -> FloatingPointType(type).
VoidType[] = type -> PrimitiveType(type).
LabelType[] = type -> PrimitiveType(type).
MetadataType[] = type -> PrimitiveType(type).

//Pointer Type
PointerType:Component[type] = componentType -> PointerType(type), Type(componentType).
PointerType:AddrSpace[type] = addr -> PointerType(type), int[64](addr).

// Array Type
ArrayType:Component[type] = componentType -> ArrayType(type), Type(componentType).
ArrayType:Size[type] = size -> ArrayType(type), int[64](size).

// Vector Type
VectorType:Component[type] = componentType -> VectorType(type), Type(componentType).
VectorType:Size[type] = size -> VectorType(type), int[64](size).

//Function Type
FunctionType:Return[type] = ret -> FunctionType(type), Type(ret).
FunctionType:Arg[type, index] = arg -> FunctionType(type), int[64](index), Type(arg).
FunctionType:nArgs[type] = total -> FunctionType(type), int[64](total).	//

// Function
Function(func), Function:id(func:id) -> string(id).

//Function:Name[func] = name -> Function(func), string(name).
Function:Type[func] = type -> Function(func), FunctionType(type).
Function:FormalArg[func, index] = arg -> Function(func), int[64](index), Variable(arg).
Function:LinkageType[func] = link -> Function(func), LinkageType(link).
Function:Visibility[func] = v -> Function(func), Visibility(v).
Function:CallingConvention[func] = cc ->  Function(func), CallingConvention(cc).
Function:Section[func] = sect -> Function(func), string(sect).
Function:Align[func] = alignment -> Function(func), int[64](alignment).
Function:Unnamed_Addr(func) -> Function(func).
Function:GC[func] = gc -> Function(func), string(gc).
Function:RetAttribute[func] = retAttr -> Function(func), string(retAttr).
Function:FnAttributes(func, fnAttr) -> Function(func), string(fnAttr).

Function:nArgs[func] = total -> Function(func), int[64](total).
Function:nArgs[func] = total
<- 
   Function:Type[func] = type,
   FunctionType:nArgs[type] = total.

Function:Type[func] = type, 
FunctionType:Arg[type, index] = argType,
Function:FormalArg[func, index] = arg
->
   Variable:Type[arg] = argType.

// Struct Type
StructType:Field[type, index] = field -> StructType(type), int[64](index), Type(field).
StructType:nFields[type] = total -> StructType(type), int[64](total).

// Standard types as constants
Int1Type[] = type <- IntegerType(type), Type:Value(type:"i1").
Int8Type[] = type <- IntegerType(type), Type:Value(type:"i8").
Int32Type[] = type <- IntegerType(type), Type:Value(type:"i32").
Int64Type[] = type <- IntegerType(type), Type:Value(type:"i64").
DoubleType[] = type <- FloatingPointType(type), Type:Value(type:"double").
FloatType[] = type <- FloatingPointType(type), Type:Value(type:"float").
HalfType[] = type <- FloatingPointType(type), Type:Value(type:"half").
Fp128Type[] = type <- FloatingPointType(type), Type:Value(type:"fp128").
X86_Fp80Type[] = type <- FloatingPointType(type), Type:Value(type:"x86_fp80").
Ppc_Fp128Type[] = type <- FloatingPointType(type), Type:Value(type:"ppc_fp128").
VoidType[] = type <- PrimitiveType(type), Type:Value(type:"void").
LabelType[] = type <- PrimitiveType(type), Type:Value(type:"label").
MetadataType[] = type <- PrimitiveType(type), Type:Value(type:"metadata").
X86mmxType[] = type <- PrimitiveType(type), Type:Value(type:"x86mmx").

// Variable
Variable(var), Variable:Id(var:id) -> string(id).
Variable:Type[var] = type -> Variable(var), Type(type).

// Immediate
Immediate(imm), Immediate:Value(imm:value) -> string(value).
Immediate:Type[imm] = type -> Immediate(imm), Type(type).

ConstantExpression(imm) -> Immediate(imm).

// constraint
Immediate:Type[_] = type -> LabelType[] != type.


//Global Variable
//GlobalVariable(gv), GlobalVariable:Value(gv:value) -> string(value).
GlobalVariable(gv) -> Immediate(gv).
GlobalVariable:Type[gv] = type -> GlobalVariable(gv), Type(type).
GlobalVariable:Initializer[gv] = init -> GlobalVariable(gv), string(init).
GlobalVariable:Section[gv] = sect -> GlobalVariable(gv), string(sect).
GlobalVariable:Align[gv] = alignment -> GlobalVariable(gv),  int[64](alignment).
GlobalVariable:Flag(gv, flag) -> GlobalVariable(gv), string(flag).
GlobalVariable:LinkageType[gv] = link -> GlobalVariable(gv), LinkageType(link).
GlobalVariable:Visibility[gv] = v -> GlobalVariable(gv), Visibility(v).
GlobalVariable:ThreadLocalMode[gv] = tlm -> GlobalVariable(gv), ThreadLocalMode(tlm).


//Global Alias
GlobalAlias(ga), GlobalAlias:Value(ga:value) -> string(value).
GlobalAlias:Type[ga] = type -> GlobalAlias(ga), Type(type).
GlobalAlias:LinkageType[ga] = link -> GlobalAlias(ga), LinkageType(link).
GlobalAlias:Visibility[ga] = v -> GlobalAlias(ga), Visibility(v).
GlobalAlias:Aliasee[ga] = aliasee -> GlobalAlias(ga), string(aliasee).


//Linkage Type for Global Values
LinkageType(link), LinkageType:Value(link:value) -> string(value).
LinkageType:External[] = link <- LinkageType(link), LinkageType:Value(link:"external").
LinkageType:Private[] = link <- LinkageType(link), LinkageType:Value(link:"private").
LinkageType:Linker_private[] = link <- LinkageType(link), LinkageType:Value(link:"linker_private").
LinkageType:Internal[] = link <- LinkageType(link), LinkageType:Value(link:"internal").
LinkageType:Linkonce[] = link <- LinkageType(link), LinkageType:Value(link:"linkonce").
LinkageType:Linkonce_odr[] = link <- LinkageType(link), LinkageType:Value(link:"linkonce_odr").
LinkageType:Weak[] = link <- LinkageType(link), LinkageType:Value(link:"weak").
LinkageType:Weak_odr[] = link <- LinkageType(link), LinkageType:Value(link:"weak_odr").
LinkageType:Common[] = link <- LinkageType(link), LinkageType:Value(link:"common").
LinkageType:Appending[] = link <- LinkageType(link), LinkageType:Value(link:"appending").
LinkageType:Dllimport[] = link <- LinkageType(link), LinkageType:Value(link:"dllimport").
LinkageType:Dllexport[] = link <- LinkageType(link), LinkageType:Value(link:"dllexport").
LinkageType:Extern_weak[] = link <- LinkageType(link), LinkageType:Value(link:"extern_weak").
LinkageType:Linker_private_weak[] = link <- LinkageType(link), LinkageType:Value(link:"linker_private_weak").
LinkageType:Available_externally[] = link <- LinkageType(link), LinkageType:Value(link:"available_externally").

//Visibility Style for Global Values
Visibility(v), Visibility:Value(v:value) -> string(value).
Visibility:Hidden[] = v <- Visibility(v), Visibility:Value(v:"hidden").
Visibility:Protected[] = v <- Visibility(v), Visibility:Value(v:"protected").

//Thread Local Mode for Global Values
ThreadLocalMode(tlm), ThreadLocalMode:Value(tlm:value) -> string(value).
ThreadLocalMode:Thread_local[] = tlm <- ThreadLocalMode(tlm), ThreadLocalMode:Value(tlm:"thread_local").
ThreadLocalMode:Local_dynamic[] = tlm <- ThreadLocalMode(tlm), ThreadLocalMode:Value(tlm:"thread_local(localdynamic)").
ThreadLocalMode:Initial_exec[] = tlm <- ThreadLocalMode(tlm), ThreadLocalMode:Value(tlm:"thread_local(initialexec)").
ThreadLocalMode:Local_exec[] = tlm <- ThreadLocalMode(tlm), ThreadLocalMode:Value(tlm:"thread_local(localexec)").

// Orderings
Ordering(ord), Ordering:Value(ord:value) -> string(value).
Ordering:Unordered[] = ord <- Ordering(ord), Ordering:Value(ord:"unordered").
Ordering:Monotonic[] = ord <- Ordering(ord), Ordering:Value(ord:"monotonic").
Ordering:Acquire[] = ord <- Ordering(ord), Ordering:Value(ord:"acquire").
Ordering:Release[] = ord <- Ordering(ord), Ordering:Value(ord:"release").
Ordering:Acq_rel[] = ord <- Ordering(ord), Ordering:Value(ord:"acq_rel").
Ordering:Seq_cst[] = ord <- Ordering(ord), Ordering:Value(ord:"seq_cst").

// Operation for the 'AtomicRMW' Instruction
Operation(op), Operation:Value(op:value) -> string(value).
Operation:Xchg[] = op <- Operation(op), Operation:Value(op:"xchg").
Operation:Add[] = op <- Operation(op), Operation:Value(op:"add").
Operation:Sub[] = op <- Operation(op), Operation:Value(op:"sub").
Operation:And[] = op <- Operation(op), Operation:Value(op:"and").
Operation:Nand[] = op <- Operation(op), Operation:Value(op:"nand").
Operation:Nor[] = op <- Operation(op), Operation:Value(op:"nor").
Operation:Or[] = op <- Operation(op), Operation:Value(op:"or").
Operation:Xor[] = op <- Operation(op), Operation:Value(op:"xor").
Operation:Max[] = op <- Operation(op), Operation:Value(op:"max").
Operation:Min[] = op <- Operation(op), Operation:Value(op:"min").
Operation:Umax[] = op <- Operation(op), Operation:Value(op:"umax").
Operation:Umin[] = op <- Operation(op), Operation:Value(op:"umin").

// Condition Code for the 'Icmp' Instruction
IcmpCondition(cond), IcmpCondition:Value(cond:value) -> string(value).
IcmpCondition:Eq[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"eq").
IcmpCondition:Ne[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"ne").
IcmpCondition:Sgt[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"sgt").
IcmpCondition:Sge[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"sge").
IcmpCondition:Slt[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"slt").
IcmpCondition:Sle[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"sle").
IcmpCondition:Ugt[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"ugt").
IcmpCondition:Ule[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"ule").
IcmpCondition:Uge[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"uge").
IcmpCondition:Ult[] = cond <- IcmpCondition(cond), IcmpCondition:Value(cond:"ult").

// Condition Code for the 'Fcmp' Instruction
FcmpCondition(cond), FcmpCondition:Value(cond:value) -> string(value).
FcmpCondition:False[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"false").
FcmpCondition:True[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"true").
FcmpCondition:Oeq[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"oeq").
FcmpCondition:Ogt[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"ogt").
FcmpCondition:Oge[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"oge").
FcmpCondition:Olt[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"ol").
FcmpCondition:Ole[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"ole").
FcmpCondition:One[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"one").
FcmpCondition:Ord[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"ord").
FcmpCondition:Ueq[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"ueq").
FcmpCondition:Ugt[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"ugt").
FcmpCondition:Uge[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"uge").
FcmpCondition:Ult[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"ult").
FcmpCondition:Ule[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"ule").
FcmpCondition:Une[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"une").
FcmpCondition:Uno[] = cond <- FcmpCondition(cond), FcmpCondition:Value(cond:"uno").

// Calling Conventions (Function, CallInstruction, InvokeInstruction)
CallingConvention(cc), CallingConvention:Value(cc:value) -> string(value).
CallingConvention:Fast[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"fastcc").
CallingConvention:Cold[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"coldcc").
CallingConvention:X86_FastCall[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"x86_fastcallcc").
CallingConvention:X86_StdCall[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"x86_stdcallcc").
CallingConvention:X86_ThisCall[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"x86_thiscallcc").
CallingConvention:Intel_OCL_BI[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"intel_ocl_bicc").
CallingConvention:ARM_AAPCS[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"arm_aapcscc").
CallingConvention:ARM_AAPCS_VFP[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"arm_aapcs_vfpcc").
CallingConvention:ARM_APCS[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"arm_apcscc").
CallingConvention:MSP430_INTR[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"msp430_intrcc").
CallingConvention:PTX_Device[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"ptx_device").
CallingConvention:PTX_Kernel[] = cc <- CallingConvention(cc), CallingConvention:Value(cc:"ptx_kernel").
//



// Instruction
Instruction(insn), Instruction:Value(insn:id) -> string(id).
Instruction:To[insn] = to -> Instruction(insn), Variable(to).	// apart from the instructions with 'void' type
Instruction:Flag(insn, flag) -> Instruction(insn), string(flag).
//Instruction:Type[insn] = type -> Instruction(insn), Type(type).

// Terminator Instructions
ReturnInstruction(insn) -> Instruction(insn).
ReturnInstruction:Void(insn) -> ReturnInstruction(insn).
BrInstruction(insn) -> Instruction(insn).
BrInstruction:Unconditional(insn) -> BrInstruction(insn).
BrInstruction:Conditional(insn) -> BrInstruction(insn).
IndirectBrInstruction(insn) -> Instruction(insn).
SwitchInstruction(insn) -> Instruction(insn).
InvokeInstruction(insn) -> Instruction(insn).
InvokeInstruction:Direct(insn) -> InvokeInstruction(insn).
InvokeInstruction:Indirect(insn) -> InvokeInstruction(insn).
ResumeInstruction(insn) -> Instruction(insn).
UnreachableInstruction(insn) -> Instruction(insn).

// Binary Operations
AddInstruction(insn) -> Instruction(insn).
SubInstruction(insn) -> Instruction(insn).
MulInstruction(insn) -> Instruction(insn).
FaddInstruction(insn) -> Instruction(insn).
FsubInstruction(insn) -> Instruction(insn).
FmulInstruction(insn) -> Instruction(insn).
UdivInstruction(insn) -> Instruction(insn).
SdivInstruction(insn) -> Instruction(insn).
FdivInstruction(insn) -> Instruction(insn).
UremInstruction(insn) -> Instruction(insn).
SremInstruction(insn) -> Instruction(insn).
FremInstruction(insn) -> Instruction(insn).

// Bitwise Binary Operations
ShlInstruction(insn) -> Instruction(insn).
LshrInstruction(insn) -> Instruction(insn).
AshrInstruction(insn) -> Instruction(insn).
AndInstruction(insn) -> Instruction(insn).
OrInstruction(insn) -> Instruction(insn).
XorInstruction(insn) -> Instruction(insn).

// Vector Operations
ExtractElementInstruction(insn) -> Instruction(insn).
InsertElementInstruction(insn) -> Instruction(insn).
ShuffleVectorInstruction(insn) -> Instruction(insn).

//Aggregate Operations
ExtractValueInstruction(insn) -> Instruction(insn).
InsertValueInstruction(insn) -> Instruction(insn).

// Memory Operations
AllocaInstruction(insn) -> Instruction(insn).
LoadInstruction(insn) -> Instruction(insn).
StoreInstruction(insn) -> Instruction(insn).
FenceInstruction(insn) -> Instruction(insn).
AtomicCmpXchgInstruction(insn) -> Instruction(insn).
AtomicRMWInstruction(insn) -> Instruction(insn).
GepInstruction(insn) -> Instruction(insn).

// Conversion Operations
TruncInstruction(insn) -> Instruction(insn).
ZextInstruction(insn) -> Instruction(insn).
SextInstruction(insn) -> Instruction(insn).
FptruncInstruction(insn) -> Instruction(insn).
FpextInstruction(insn) -> Instruction(insn).
FptouiInstruction(insn) -> Instruction(insn).
FptosiInstruction(insn) -> Instruction(insn).
UitofpInstruction(insn) -> Instruction(insn). 
SitofpInstruction(insn) -> Instruction(insn).
PtrtointInstruction(insn) -> Instruction(insn).
InttoptrInstruction(insn) -> Instruction(insn).
BitcastInstruction(insn) -> Instruction(insn).

// Other
IcmpInstruction(insn) -> Instruction(insn).
FcmpInstruction(insn) -> Instruction(insn).
PhiInstruction(insn) -> Instruction(insn).
SelectInstruction(insn) -> Instruction(insn).
CallInstruction(insn) -> Instruction(insn).
CallInstruction:Direct(insn) -> CallInstruction(insn).
CallInstruction:Indirect(insn) -> CallInstruction(insn).
VAArgInstruction(insn) -> Instruction(insn).
LandingpadInstruction(insn) -> Instruction(insn).

// Operand as union
Operand(operand) -> .
Operand:byVariable[var] = operand -> Variable(var), Operand(operand).
Operand:byImmediate[imm] = operand -> Immediate(imm), Operand(operand).

lang:physical:storageModel[`Operand] = "ScalableSparse".
lang:constructor(`Operand:byVariable).
lang:constructor(`Operand:byImmediate).

// Return Instruction
ReturnInstruction:Operand[insn] = operand -> ReturnInstruction(insn), Operand(operand).

// Br Instruction
BrInstruction:Conditional:Operand[insn] = cond -> BrInstruction(insn), Operand(cond).
BrInstruction:Conditional:TrueLabel[insn] = truel -> BrInstruction(insn), Variable(truel).
BrInstruction:Conditional:FalseLabel[insn] = falsel -> BrInstruction(insn), Variable(falsel).

BrInstruction:Unconditional:Label[insn] = label -> BrInstruction(insn), Variable(label).

// IndirectBr Instruction
IndirectBrInstruction:Operand[insn] = address -> IndirectBrInstruction(insn), Operand(address).
IndirectBrInstruction:Label[insn, index] = label -> IndirectBrInstruction(insn), int[64](index), Variable(label).
IndirectBrInstruction:nLabels[insn] = total -> IndirectBrInstruction(insn), int[64](total).

IndirectBrInstruction:Label[_, _] = _, Variable:Type[_] = type -> type = LabelType[].

//Switch Instruction
SwitchInstruction:Operand[insn] = value -> SwitchInstruction(insn), Operand(value).
SwitchInstruction:Label[insn] = label -> SwitchInstruction(insn), Variable(label).
SwitchInstruction:Case:Value[insn, index] = value -> SwitchInstruction(insn), int[64](index), Immediate(value).
SwitchInstruction:Case:Label[insn, index] = label -> SwitchInstruction(insn), int[64](index), Variable(label).
SwitchInstruction:nCases[insn] = cases -> SwitchInstruction(insn), int[64](cases).

SwitchInstruction:Label[_] = _, Variable:Type[_] = type -> type = LabelType[].
SwitchInstruction:Case:Label[_, _] = _, Variable:Type[_] = type -> type = LabelType[].

// Invoke Instruction
InvokeInstruction:ActualArg[insn, index] = arg -> InvokeInstruction(insn), int[64](index), Operand(arg).
InvokeInstruction:Indirect:Pointer[insn] = ptr -> InvokeInstruction(insn), Variable(ptr).
InvokeInstruction:Direct:Name[insn] = name -> InvokeInstruction(insn), string(name).
InvokeInstruction:Direct:Type[insn] = type -> InvokeInstruction(insn), FunctionType(type).
InvokeInstruction:NormalLabel[insn] = nlabel -> InvokeInstruction(insn), Variable(nlabel).
InvokeInstruction:ExceptionLabel[insn] = elabel -> InvokeInstruction(insn), Variable(elabel).
InvokeInstruction:RetAttribute[insn] = retAttr -> InvokeInstruction(insn), string(retAttr).
InvokeInstruction:FnAttributes(insn, fnAttr) -> InvokeInstruction(insn), string(fnAttr).
InvokeInstruction:CallingConv[insn] = cc -> InvokeInstruction(insn), CallingConvention(cc).

// constraints
InvokeInstruction:NormalLabel[_] = _, Variable:Type[_] = type -> type = LabelType[].
InvokeInstruction:ExceptionLabel[_] = _, Variable:Type[_] = type -> type = LabelType[].

// Resume Instruction
ResumeInstruction:Operand[insn] = operand -> ResumeInstruction(insn), Operand(operand).

// Add Instruction
AddInstruction:LeftOperand[insn] = left -> AddInstruction(insn), Operand(left).
AddInstruction:RightOperand[insn] = right -> AddInstruction(insn), Operand(right).

//Instruction:Type[insn] = type -> AddInstruction(insn), type = Int32Type[]; VectorType(type).
//Instruction:Type[_] = type, VectorType:Component[type] = comp -> Int32Type[] = comp.

AddInstruction:LeftOperand[_] = left, 
Operand:byVariable[var] = left, 
Variable:Type[var] = type 
-> 
   type = Int32Type[]; VectorType(type).

AddInstruction:LeftOperand[_] = left,
Operand:byVariable[var] = left,
Variable:Type[var] = type, VectorType:Component[type] = comp -> Int32Type[] = comp.

AddInstruction:LeftOperand[_] = left, 
Operand:byImmediate[imm] = left, 
Immediate:Type[imm] = type 
-> 
   type = Int32Type[]; VectorType(type).

AddInstruction:LeftOperand[_] = left,
Operand:byImmediate[imm] = left,
Immediate:Type[imm] = type, VectorType:Component[type] = comp -> Int32Type[] = comp.

// Sub Instruction
SubInstruction:LeftOperand[insn] = left -> SubInstruction(insn), Operand(left).
SubInstruction:RightOperand[insn] = right -> SubInstruction(insn), Operand(right).

// Mul Instruction
MulInstruction:LeftOperand[insn] = left -> MulInstruction(insn), Operand(left).
MulInstruction:RightOperand[insn] = right -> MulInstruction(insn), Operand(right).

// Fadd Instruction
FaddInstruction:LeftOperand[insn] = left -> FaddInstruction(insn), Operand(left).
FaddInstruction:RightOperand[insn] = right -> FaddInstruction(insn), Operand(right).

// Fsub Instruction
FsubInstruction:LeftOperand[insn] = left -> FsubInstruction(insn), Operand(left).
FsubInstruction:RightOperand[insn] = right -> FsubInstruction(insn), Operand(right).

// Fmul Instruction
FmulInstruction:LeftOperand[insn] = left -> FmulInstruction(insn), Operand(left).
FmulInstruction:RightOperand[insn] = right -> FmulInstruction(insn), Operand(right).

// Udiv Instruction
UdivInstruction:LeftOperand[insn] = left -> UdivInstruction(insn), Operand(left).
UdivInstruction:RightOperand[insn] = right -> UdivInstruction(insn), Operand(right).

// Sdiv Instruction
SdivInstruction:LeftOperand[insn] = left -> SdivInstruction(insn), Operand(left).
SdivInstruction:RightOperand[insn] = right -> SdivInstruction(insn), Operand(right).

// Fdiv Instruction
FdivInstruction:LeftOperand[insn] = left -> FdivInstruction(insn), Operand(left).
FdivInstruction:RightOperand[insn] = right -> FdivInstruction(insn), Operand(right).

// Urem Instruction
UremInstruction:LeftOperand[insn] = left -> UremInstruction(insn), Operand(left).
UremInstruction:RightOperand[insn] = right -> UremInstruction(insn), Operand(right).

// Srem Instruction
SremInstruction:LeftOperand[insn] = left -> SremInstruction(insn), Operand(left).
SremInstruction:RightOperand[insn] = right -> SremInstruction(insn), Operand(right).

// Frem Instruction
FremInstruction:LeftOperand[insn] = left -> FremInstruction(insn), Operand(left).
FremInstruction:RightOperand[insn] = right -> FremInstruction(insn), Operand(right).

// Shl Instruction
ShlInstruction:LeftOperand[insn] = left -> ShlInstruction(insn), Operand(left).
ShlInstruction:RightOperand[insn] = left -> ShlInstruction(insn), Operand(left).

// Lshr Instruction
LshrInstruction:LeftOperand[insn] = left -> LshrInstruction(insn), Operand(left).
LshrInstruction:RightOperand[insn] = left -> LshrInstruction(insn), Operand(left).

// Ashr Instruction
AshrInstruction:LeftOperand[insn] = left -> AshrInstruction(insn), Operand(left).
AshrInstruction:RightOperand[insn] = left -> AshrInstruction(insn), Operand(left).

// And Instruction
AndInstruction:LeftOperand[insn] = left -> AndInstruction(insn), Operand(left).
AndInstruction:RightOperand[insn] = left -> AndInstruction(insn), Operand(left).

//Or Instruction
OrInstruction:LeftOperand[insn] = left -> OrInstruction(insn), Operand(left).
OrInstruction:RightOperand[insn] = left -> OrInstruction(insn), Operand(left).

// Xor Instruction
XorInstruction:LeftOperand[insn] = left -> XorInstruction(insn), Operand(left).
XorInstruction:RightOperand[insn] = left -> XorInstruction(insn), Operand(left).

// ExtractElement Instruction
ExtractElementInstruction:LeftOperand[insn] = left -> ExtractElementInstruction(insn), Operand(left).
ExtractElementInstruction:RightOperand[insn] = right -> ExtractElementInstruction(insn), Operand(right).

// InsertElement Instruction
InsertElementInstruction:VectorOperand[insn] = vec -> InsertElementInstruction(insn), Operand(vec).
InsertElementInstruction:ValueOperand[insn] = value -> InsertElementInstruction(insn), Operand(value).
InsertElementInstruction:IndexOperand[insn] = idx -> InsertElementInstruction(insn), Operand(idx).

// ShuffleVector Instruction
ShuffleVectorInstruction:VectorOperandLeft[insn] = left -> ShuffleVectorInstruction(insn), Operand(left).
ShuffleVectorInstruction:VectorOperandRight[insn] = right -> ShuffleVectorInstruction(insn), Operand(right).
ShuffleVectorInstruction:Mask[insn] = mask -> ShuffleVectorInstruction(insn), Immediate(mask).

// ExtractValue Instruction
ExtractValueInstruction:Operand[insn] = value -> ExtractValueInstruction(insn), Operand(value).
ExtractValueInstruction:Indices[insn, index] = idx -> ExtractValueInstruction(insn), int[64](index), Immediate(idx).
ExtractValueInstruction:nIndices[insn] = total -> ExtractValueInstruction(insn), int[64](total).

// InsertValue Instruction
InsertValueInstruction:LeftOperand[insn] = left -> InsertValueInstruction(insn), Operand(left).
InsertValueInstruction:RightOperand[insn] = right -> InsertValueInstruction(insn), Operand(right).
InsertValueInstruction:Indices[insn, index] = idx -> InsertValueInstruction(insn), int[64](index), Immediate(idx).
InsertValueInstruction:nIndices[insn] = total -> InsertValueInstruction(insn), int[64](total).

// Alloca Instruction
AllocaInstruction:Size:Type[insn] = type -> AllocaInstruction(insn), Type(type).
AllocaInstruction:Size:Operand[insn] = size -> AllocaInstruction(insn), Operand(size).
AllocaInstruction:Align[insn] = alignment -> AllocaInstruction(insn),  int[64](alignment).

//Load Instruction
LoadInstruction:Operand[insn] = operand -> LoadInstruction(insn), Variable(operand).
LoadInstruction:Align[insn] = alignment -> LoadInstruction(insn),  int[64](alignment).
LoadInstruction:Ordering[insn] = ord -> LoadInstruction(insn), Ordering(ord).

// Constraints
LoadInstruction:Operand[_] = _, Variable:Type[_] = type -> PointerType(type).
LoadInstruction:Ordering[_] = ord ->
    Ordering:Acquire[] = ord ;
    Ordering:Unordered[] = ord ;
    Ordering:Monotonic[] = ord ;
    Ordering:Seq_cst[] = ord. 

// Store Instruction
StoreInstruction:LeftOperand[insn] = left -> StoreInstruction(insn), Operand(left).
StoreInstruction:RightOperand[insn] = right -> StoreInstruction(insn), Variable(right).
StoreInstruction:Align[insn] = alignment -> StoreInstruction(insn),  int[64](alignment).
StoreInstruction:Ordering[insn] = ord -> StoreInstruction(insn), Ordering(ord).

// Constraints
Instruction:To[insn] = _ -> !StoreInstruction(insn).
StoreInstruction:RightOperand[_] = _, Variable:Type[_] = type -> PointerType(type).

StoreInstruction:Ordering[_] = ord ->
    Ordering:Release[] = ord ;
    Ordering:Unordered[] = ord ;
    Ordering:Monotonic[] = ord ;
    Ordering:Seq_cst[] = ord. 


// Fence Instruction
// fence [singlethread] <ordering>
FenceInstruction:Ordering[insn] = ord -> FenceInstruction(insn), Ordering(ord).

// Constraint
FenceInstruction:Ordering[_] = ord ->
    Ordering:Acquire[] = ord ;
    Ordering:Release[] = ord ;
    Ordering:Acq_rel[] = ord ;
    Ordering:Seq_cst[] = ord. 

// AtomicCmpXchg Instruction
AtomicCmpXchgInstruction:FirstOperand[insn] = first -> AtomicCmpXchgInstruction(insn), Operand(first).
AtomicCmpXchgInstruction:SecondOperand[insn] = second -> AtomicCmpXchgInstruction(insn), Operand(second).
AtomicCmpXchgInstruction:ThirdOperand[insn] = third -> AtomicCmpXchgInstruction(insn), Operand(third).
AtomicCmpXchgInstruction:Ordering[insn] = ord -> AtomicCmpXchgInstruction(insn), Ordering(ord).

//Instruction:Type[insn] = type -> AtomicCmpXchgInstruction(insn), IntegerType(type).

AtomicCmpXchgInstruction:FirstOperand[_] = first, 
Operand:byVariable[var] = first, 
Variable:Type[var] = type 
-> 
   PointerType(type).

AtomicCmpXchgInstruction:FirstOperand[_] = first, 
Operand:byImmediate[imm] = first, 
Immediate:Type[imm] = type 
-> 
   PointerType(type).

AtomicCmpXchgInstruction:FirstOperand[_] = first,
Operand:byVariable[var] = first,
Variable:Type[var] = type, PointerType:Component[type] = comp -> IntegerType(comp).

AtomicCmpXchgInstruction:FirstOperand[_] = first,
Operand:byImmediate[var] = first,
Immediate:Type[var] = type, PointerType:Component[type] = comp -> IntegerType(comp).

AtomicCmpXchgInstruction:SecondOperand[_] = second, 
Operand:byVariable[var] = second, 
Variable:Type[var] = type 
-> 
   IntegerType(type).

AtomicCmpXchgInstruction:SecondOperand[_] = second, 
Operand:byImmediate[imm] = second, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type).

AtomicCmpXchgInstruction:ThirdOperand[_] = third, 
Operand:byVariable[var] = third, 
Variable:Type[var] = type 
->
   IntegerType(type).

AtomicCmpXchgInstruction:ThirdOperand[_] = third, 
Operand:byImmediate[imm] = third, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type).

// AtomicRMW Instruction
AtomicRMWInstruction:Operation[insn] = op -> AtomicRMWInstruction(insn), Operation(op).
AtomicRMWInstruction:LeftOperand[insn] = left -> AtomicRMWInstruction(insn), Operand(left).
AtomicRMWInstruction:RightOperand[insn] = right -> AtomicRMWInstruction(insn), Operand(right).
AtomicRMWInstruction:Ordering[insn] = ord -> AtomicRMWInstruction(insn), Ordering(ord).

AtomicRMWInstruction:LeftOperand[_] = left, 
Operand:byVariable[var] = left, 
Variable:Type[var] = type 
-> 
   PointerType(type).

AtomicRMWInstruction:LeftOperand[_] = left,
Operand:byImmediate[imm] = left, 
Immediate:Type[imm] = type 
-> 
   PointerType(type).

AtomicRMWInstruction:LeftOperand[_] = left,
Operand:byVariable[var] = left,
Variable:Type[var] = type, PointerType:Component[type] = comp -> IntegerType(comp).

AtomicRMWInstruction:LeftOperand[_] = left,
Operand:byImmediate[var] = left,
Immediate:Type[var] = type, PointerType:Component[type] = comp -> IntegerType(comp).

AtomicRMWInstruction:RightOperand[_] = right, 
Operand:byVariable[var] = right, 
Variable:Type[var] = type 
-> 
   IntegerType(type).

AtomicRMWInstruction:RightOperand[_] = right, 
Operand:byImmediate[imm] = right, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type).

//Gep Instruction
GepInstruction:Operand[insn] = ptr -> GepInstruction(insn), Operand(ptr).
//GepInstruction:LeftIndex[insn] = lvalue -> GepInstruction(insn), Operand(lvalue).
//GepInstruction:RightIndex[insn] = rvalue -> GepInstruction(insn), Operand(rvalue).
GepInstruction:Indices[insn, index] = indice -> GepInstruction(insn), int[64](index), Operand(indice).
GepInstruction:nIndices[insn] = total -> GepInstruction(insn), int[64](total).

//Trunc Instruction
TruncInstruction:Operand[insn] = value -> TruncInstruction(insn), Operand(value).
TruncInstruction:Type[insn] = type -> TruncInstruction(insn), Type(type).

//Instruction:Type[insn] = type -> TruncInstruction(insn), IntegerType(type); VectorType(type).
//Instruction:Type[_] = type, VectorType:Component[type] = comp -> IntegerType(comp).

TruncInstruction:Operand[_] = value, 
Operand:byVariable[var] = value, 
Variable:Type[var] = type 
-> 
   IntegerType(type); VectorType(type).

TruncInstruction:Operand[_] = left,
Operand:byVariable[var] = left,
Variable:Type[var] = type, VectorType:Component[type] = comp -> IntegerType(comp).

TruncInstruction:Operand[_] = value, 
Operand:byImmediate[imm] = value, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type).

TruncInstruction:Type[_] = type -> IntegerType(type); VectorType(type). 
TruncInstruction:Type[_] = type, VectorType:Component[type] = comp -> IntegerType(comp).

//Zext Instruction
ZextInstruction:Operand[insn] = value -> ZextInstruction(insn), Operand(value).
ZextInstruction:Type[insn] = type -> ZextInstruction(insn), Type(type).

//Sext Instruction
SextInstruction:Operand[insn] = value -> SextInstruction(insn), Operand(value).
SextInstruction:Type[insn] = type -> SextInstruction(insn), Type(type).

//Fptrunc Instruction
FptruncInstruction:Operand[insn] = value -> FptruncInstruction(insn), Operand(value).
FptruncInstruction:Type[insn] = type -> FptruncInstruction(insn), FloatingPointType(type).

// Fpext Instruction
FpextInstruction:Operand[insn] = value -> FpextInstruction(insn), Operand(value).
FpextInstruction:Type[insn] = type -> FpextInstruction(insn), IntegerType(type).

// Fptoui Instruction
FptouiInstruction:Operand[insn] = value -> FptouiInstruction(insn), Operand(value).
FptouiInstruction:Type[insn] = type -> FptouiInstruction(insn), IntegerType(type).

// Fptosi Instruction
FptosiInstruction:Operand[insn] = value -> FptosiInstruction(insn), Operand(value).
FptosiInstruction:Type[insn] = type -> FptosiInstruction(insn), IntegerType(type).

// Uitofp Instruction
UitofpInstruction:Operand[insn] = value -> UitofpInstruction(insn), Operand(value).
UitofpInstruction:Type[insn] = type -> UitofpInstruction(insn), FloatingPointType(type).

// Sitofp Instruction
SitofpInstruction:Operand[insn] = value -> SitofpInstruction(insn), Operand(value).
SitofpInstruction:Type[insn] = type -> SitofpInstruction(insn), FloatingPointType(type).

// Ptrtoint Instruction
PtrtointInstruction:Operand[insn] = value -> PtrtointInstruction(insn), Operand(value).
PtrtointInstruction:Type[insn] = type -> PtrtointInstruction(insn), IntegerType(type).

// Inttoptr Instruction
InttoptrInstruction:Operand[insn] = value -> InttoptrInstruction(insn), Operand(value).
InttoptrInstruction:Type[insn] = type -> InttoptrInstruction(insn), PointerType(type).

// Bitcast Instruction
BitcastInstruction:Operand[insn] = value -> BitcastInstruction(insn), Operand(value).
BitcastInstruction:Type[insn] = type -> BitcastInstruction(insn), Type(type).

//Icmp Instruction
IcmpInstruction:Cond[insn] = cond -> IcmpInstruction(insn), IcmpCondition(cond).
IcmpInstruction:LeftOperand[insn] = left -> IcmpInstruction(insn), Operand(left).
IcmpInstruction:RightOperand[insn] = right -> IcmpInstruction(insn), Operand(right).

// left
IcmpInstruction:LeftOperand[_] = left, 
Operand:byVariable[var] = left, 
Variable:Type[var] = type 
-> 
   IntegerType(type); PointerType(type); VectorType(type).

IcmpInstruction:LeftOperand[_] = left,
Operand:byVariable[var] = left,
Variable:Type[var] = type, VectorType:Component[type] = comp -> IntegerType(comp); PointerType(type).

IcmpInstruction:LeftOperand[_] = left, 
Operand:byImmediate[imm] = left, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type); PointerType(type).

// right
IcmpInstruction:RightOperand[_] = right, 
Operand:byVariable[var] = right, 
Variable:Type[var] = type 
-> 
   IntegerType(type); PointerType(type); VectorType(type).

IcmpInstruction:RightOperand[_] = right,
Operand:byVariable[var] = right,
Variable:Type[var] = type, VectorType:Component[type] = comp -> IntegerType(comp); PointerType(type).

IcmpInstruction:RightOperand[_] = right, 
Operand:byImmediate[imm] = right, 
Immediate:Type[imm] = type 
-> 
   IntegerType(type); PointerType(type).

// Fcmp Instruction
FcmpInstruction:Cond[insn] = cond -> FcmpInstruction(insn), FcmpCondition(cond).
FcmpInstruction:LeftOperand[insn] = left -> FcmpInstruction(insn), Operand(left).
FcmpInstruction:RightOperand[insn] = right -> FcmpInstruction(insn), Operand(right).

// Phi Instruction
PhiInstruction:Type[insn] = type -> PhiInstruction(insn), Type(type).
PhiInstruction:Pair:Value[insn, index] = value -> PhiInstruction(insn), int[64](index), Operand(value).
PhiInstruction:Pair:Label[insn, index] = label -> PhiInstruction(insn), int[64](index), Variable(label).
PhiInstruction:nPairs[insn] = total -> PhiInstruction(insn), int[64](total).

// Select Instruction
SelectInstruction:ConditionOperand[insn] = cond -> SelectInstruction(insn), Operand(cond).
SelectInstruction:ValueOperandLeft[insn] = left -> SelectInstruction(insn), Operand(left).
SelectInstruction:ValueOperandRight[insn] = right -> SelectInstruction(insn), Operand(right).

SelectInstruction:ConditionOperand[_] = cond,
Operand:byVariable[var] = cond, 
Variable:Type[var] = type 
-> 
   Int1Type[] = type; VectorType(type).

SelectInstruction:ConditionOperand[_] = cond,
Operand:byVariable[var] = cond,
Variable:Type[var] = type, VectorType:Component[type] = comp -> Int1Type[] = comp.

SelectInstruction:ConditionOperand[_] = cond,
Operand:byImmediate[imm] = cond, 
Immediate:Type[imm] = type 
-> 
   Int1Type[] = type; VectorType(type).

SelectInstruction:ConditionOperand[_] = cond,
Operand:byImmediate[imm] = cond,
Immediate:Type[imm] = type, VectorType:Component[type] = comp -> Int1Type[] = comp.

// Call Instruction
//CallInstruction:ActualArg[insn, index] = arg -> CallInstruction(insn), int[64](index), Operand(arg).
CallInstruction:ActualArg(insn, index, arg) -> CallInstruction(insn), string(index), Operand(arg).
CallInstruction:Indirect:Pointer[insn] = ptr -> CallInstruction(insn), Variable(ptr).

// CallInstruction:Direct:Immediate[insn] = imm -> CallInstruction(insn), Immediate(imm).
CallInstruction:Direct:Name[insn] = name -> CallInstruction(insn), string(name).
CallInstruction:Direct:Type[insn] = type -> CallInstruction(insn), FunctionType(type).
CallInstruction:CallingConvention[insn] = cc -> CallInstruction(insn), CallingConvention(cc).
CallInstruction:RetAttribute[insn] = retAttr -> CallInstruction(insn), string(retAttr).
CallInstruction:FnAttributes(insn, fnAttr) -> CallInstruction(insn), string(fnAttr).

// VAArg Instruction
VAArgInstruction:Operand[insn] = left -> VAArgInstruction(insn), Variable(left).
VAArgInstruction:Type[insn] = right -> VAArgInstruction(insn), Type(right).

VAArgInstruction:Operand[_] =  _, Variable:Type[_] = type -> PointerType(type).

// Landingpad Instruction
LandingpadInstruction:Type[insn] = type -> LandingpadInstruction(insn), Type(type).
LandingpadInstruction:FunctionOperand[insn] = func -> LandingpadInstruction(insn), Operand(func).
LandingpadInstruction:Clause:Catch[insn] = catch -> LandingpadInstruction(insn), Operand(catch).
LandingpadInstruction:Clause:Filter[insn] = filter -> LandingpadInstruction(insn), Immediate(filter).

