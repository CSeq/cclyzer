// Variable
variable(Var), variable:id(Var:Ref) -> string(Ref).
variable:type[Var] = Type -> variable(Var), type(Type).

// Immediate
immediate(Imm), immediate:value(Imm:Ref) -> string(Ref).
immediate:type[Imm] = Type -> immediate(Imm), type(Type).

constant_expression(Imm) -> immediate(Imm).

// Operand as union of {variable, immediate}.
operand(Operand) -> .

// Constructors
operand:by_variable[Var] = Operand  ->
   variable(Var), operand(Operand).

operand:by_immediate[Imm] = Operand ->
   immediate(Imm), operand(Operand).

lang:physical:storageModel[`operand] = "ScalableSparse".
lang:constructor(`operand:by_variable).
lang:constructor(`operand:by_immediate).

// Type predicate

operand:type[Operand] = Type <-
   operand:by_variable[Var] = Operand,
   variable:type[Var] = Type.

operand:type[Operand] = Type <-
   operand:by_immediate[Imm] = Operand,
   immediate:type[Imm] = Type.

// View predicates
operand:as_variable[Operand] = Var <-
   variable(Var), operand(Operand).

operand:as_immediate[Operand] = Imm <-
   immediate(Imm), operand(Operand).

// Helper functions
variable:label(Var) <-
   variable:type[Var] = Type,
   label_type[] = Type.

// Constraint: immediates cannot be labels
immediate:type[_] = type -> label_type[] != type.
