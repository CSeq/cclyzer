// http://llvm.org/docs/LangRef.html#shufflevector-instruction
// keywords: vector; instruction

shufflevector_instruction(Insn) -> instruction(Insn).

shufflevector_instruction:first_vector[Insn] = First ->
   shufflevector_instruction(Insn), operand(First).

shufflevector_instruction:second_vector[Insn] = Second ->
   shufflevector_instruction(Insn), operand(Second).

shufflevector_instruction:mask[Insn] = Mask ->
   shufflevector_instruction(Insn), immediate(Mask).

// The type of the two input vectors.
// !! Functional dependency violation encodes (1.i) constraint !!
shufflevector_instruction:input_type[Insn] = Type <-
   shufflevector_instruction:first_vector[Insn] = Vector,
   operand:type[Vector] = Type.

shufflevector_instruction:input_type[Insn] = Type <-
   shufflevector_instruction:second_vector[Insn] = Vector,
   operand:type[Vector] = Type.

// The type of the shuffle mask.
shufflevector_instruction:mask_type[Insn] = Type <-
   shufflevector_instruction:mask[Insn] = Mask,
   immediate:type[Mask] = Type.


// Constraints:
//
// 1. The 'shufflevector' instruction takes three arguments:
//  (i)  two vectors of the same type, and
//  (ii) a shuffle mask argument.
// 2. The shuffle mask is required to be:
//  (i) a constant vector
//  (ii) with i32-integer component type.
//
// 3. The result is a vector
//  (i)  whose length is the same as the shuffle mask and
//  (ii) whose element type is the same as the element type of the first two operands.

shufflevector_instruction(Insn) -> shufflevector_instruction:first_vector[Insn]  = _.
shufflevector_instruction(Insn) -> shufflevector_instruction:second_vector[Insn] = _.
shufflevector_instruction(Insn) -> shufflevector_instruction:mask[Insn] = _.

shufflevector_instruction:input_type[_] = Input
 ->
   vector_type(Input).


shufflevector_instruction:mask_type[_] = Mask
 ->
   vector_type:i32(Mask).

// The type of the elements of the two input and one output vectors.
// !! Functional dependency violation encodes (3.ii) constraint !!
shufflevector_instruction:element_type[Insn] = Comp <-
   shufflevector_instruction:input_type[Insn] = Type,
   vector_type:component[Type] = Comp.

shufflevector_instruction:element_type[Insn] = Comp <-
   instruction:type[Insn] = Type,
   vector_type:component[Type] = Comp.


instruction:type[Insn] = Result,
   shufflevector_instruction:mask_type[Insn] = Mask
 ->
   vector:compatible(Result, Mask).
