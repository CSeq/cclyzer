// Type Hierarchy under derived types

derived_type(Type)   -> type(Type).
function_type(Type)  -> derived_type(Type).
vector_type(Type)    -> derived_type(Type).
pointer_type(Type)   -> derived_type(Type).
aggregate_type(Type) -> derived_type(Type).
array_type(Type)     -> aggregate_type(Type).
struct_type(Type)    -> aggregate_type(Type).
opaque_struct_type(Type) -> struct_type(Type).

// Function Type

function_type:return[Type] = Ret -> 
   function_type(Type), type(Ret).

function_type:arg[Type, Index] = Arg -> 
   function_type(Type), int[64](Index), type(Arg).

function_type:nargs[Type] = Total -> 
   function_type(Type), int[64](Total).

// Pointer Type

pointer_type:component[Type] = Comp -> 
   pointer_type(Type), type(Comp).

pointer_type:addr_space[Type] = Addr -> 
   pointer_type(Type), int[64](Addr).

// Vector Type

vector_type:component[Type] = Comp -> 
   vector_type(Type), Type(Comp).

vector_type:size[Type] = Size ->
   vector_type(Type), int[64](Size).

// Array Type

array_type:component[Type] = Comp -> 
   array_type(Type), type(Comp).

array_type:size[Type] = Size -> 
   array_type(Type), int[64](Size).

// Struct Type

struct_type:field[Type, Index] = Field -> 
   struct_type(Type), int[64](Index), type(Field).

struct_type:nfields[Type] = Total -> 
   struct_type(Type), int[64](Total).


// Helper predicate

vector:eq_size_2(t1, t2) <-
   vector_type:size[t1] = size,
   vector_type:size[t2] = size.

vector:eq_size_3(t1, t2, t3) <-
   vector_type:size[t1] = size,
   vector_type:size[t2] = size,
   vector_type:size[t3] = size.
