// http://llvm.org/docs/LangRef.html#ret-instruction
// keywords: terminator; instruction

return_instruction(Insn) -> instruction(Insn).

// The ‘ret‘ instruction optionally accepts a single 
// argument, the return value.

return_instruction:value[Insn] = Value -> 
   return_instruction(Insn), operand(Value).

return_instruction:void(Insn) -> return_instruction(Insn).
return_instruction:void(Insn) -> !return_instruction:value[Insn] = _.


// A function is not well formed if: 
//  (i)   it it has a non-void return type and contains a ‘ret‘ 
//        instruction with no return value or 
//  (ii)  a return value with a type that does not match its type, or 
//  (iii) if it has a void return type and contains a ‘ret‘ 
//        instruction with a return value.

function:wellformed(Func) <-
   function(Func), !function:illformed(Func).

function:illformed(Func) <-
   void_type[] = Void,
   function:type[Func] = Type,
   function_type:return[Type] != Void,
   return_instruction:void(Insn),
   instruction:function[Insn] = Func.

function:illformed(Func) <-
   void_type[] = Void,
   function:type[Func] = Type,
   function_type:return[Type] = Ret,
   Ret != Void,
   return_instruction[Insn] = Value,
   operand:type[Value] != Ret,
   instruction:function[Insn] = Func.

function:illformed(Func) <-
   void_type[] = Void,
   function:type[Func] = Type,
   function_type:return[Type] = Void,
   return_instruction(Insn),
   !return_instruction:void(Insn),
   instruction:function[Insn] = Func.


// Constraints:
//  (i) The type of the return value must be a ‘first class‘ type.

return_instruction:value[Insn] = Value,
   operand:type[Value] = Type
 ->
   type:firstclass(Type).
