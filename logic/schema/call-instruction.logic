// http://llvm.org/docs/LangRef.html#call-instruction
// keywords: instruction

call_instruction(Insn) -> instruction(Insn).

call_instruction:function[Insn] = Value ->
   call_instruction(Insn), operand(Value).

// Actual parameters
call_instruction:param[Insn, Index] = Param -> 
   call_instruction(Insn), int[64](Index), operand(Param).

call_instruction:calling_convention[Insn] = Con ->
   call_instruction(Insn), calling_convention(Con).

call_instruction:return_attribute[Insn] = Attr ->
   call_instruction(Insn), parameter_attribute(Attr).

call_instruction:function_attribute(Insn, Index, Attr) ->
   call_instruction(Insn), int[64](Index), function_attribute(Attr).

call_instruction:type[Insn] = Return <-
   call_instruction:function[Insn] = Value,
   operand:type[Value] = Type,
   function_type:return[Type] = Return.


// Constraints:
//
//  (1) Only ‘zeroext‘, ‘signext‘, and ‘inreg‘ attributes 
//      are valid for return values.
//  (2) The calling convention of the call must match the 
//      calling convention of the target function.
//  (3) The type of the call instruction is also the type of 
//      the return value. Functions that return no value are 
//      marked void.
//  (4) The function type shall be the signature of the pointer 
//      to function value being invoked. The argument types must 
//      match the types implied by this signature.
//  (5) All arguments must be of first class type.
//  (6) Only ‘noreturn‘, ‘nounwind‘, ‘readonly‘ and ‘readnone‘ 
//      attributes are valid as function attributes.


call_instruction:return_attribute[_] = Attr ->
   parameter_attribute:zeroext[] = Attr;
   parameter_attribute:signext[] = Attr;
   parameter_attribute::nreg[] = Attr. // c1


call_instruction:calling_convention[Insn] = Con,
   instruction:function[Insn] = Func
 ->
   function:calling_convention[Func] = Con. // c2


call_instruction:type[Insn] = Type,
   !void_type[] = Type
 ->
   instruction:Type[Insn] = Type. // c3


call_instruction:function[Insn] = Value,
   function_type[Value] = FuncType,
   function_type:params[Type, Index] = ParamType,
   call_instruction:param[Insn, Index] = Param 
 ->
   operand:type[Param] = ParamType. // c4


call_instruction:param[_, _] = Param,
   operand:type[Param] = Type
 ->
   type:firstclass(Type). // c5

call_instruction:function_attribute(_, _, Attr) -> 
   function_attribute:noreturn[] = Attr;
   function_attribute:nounwind[] = Attr;
   function_attribute:readonly[] = Attr;
   function_attribute:readnone[] = Attr. // c6

