// http://llvm.org/docs/LangRef.html#functions

function(Func), function:id(Func:Ref) -> string(Ref).

// TODO: how are varargs represented here?

// Optional function attributes

function:unnamed_addr(Func) -> function(Func).

function:linkage_type[Func] = Link -> 
   function(Func), linkage_type(Link).

function:visibility[Func] = Vis -> 
   function(Func), visibility(Vis).

function:calling_convention[Func] = Con -> 
   function(Func), calling_convention(Conv).

function:section[Func] = Sect -> 
   function(Func), string(Sect).

function:alignment[Func] = Alignment -> 
   function(Func), int[64](Alignment).

function:attributes(Func, Attr) -> 
   function(Func), attribute(Attr).

function:gc[Func] = CollectorName -> 
   function(Func), string(CollectorName).

function:name[Func] = Name -> 
   function(Func), string(Name).

function:type[Func] = Type -> 
   function(Func), function_type(Type).

// Number of parameters
function:nparams[Func] = Total -> function(Func), int[64](Total).
function:nparams[Func] = Total <- 
   function:type[Func] = Type,
   function_type:nparams[Type] = Total.

// Formal parameters
function:param[Func, Index] = Param -> 
   function(Func), int[64](Index), variable(Param).

// [Parameter Attributes]
//
// The return type and each parameter of a function type may have 
// a set of parameter attributes associated with them. 
//
// Parameter attributes are used to communicate additional information 
// about the result or parameters of a function. 
//
// Parameter attributes are considered to be part of the function, 
// not of the function type, so functions with different parameter 
// attributes can have the same function type.
//
// Parameter attributes are simple keywords that follow the type specified. 
// If multiple parameter attributes are needed, they are space separated.

function:return_attribute(Func, Attr) -> 
   function(Func), attribute(Attr).

function:param_attribute(Func, Index, Atr) -> 
   function(Func), int[64](Index), attribute(Attr).

// Constraints:
//
// Number and types of parameters must match those declared
// in the function type.
//
// The return type must also be compatible for the function
// to be well-formed, but this is checked in ret-instruction 
// logic.

function:type[Func] = Type, 
   function_type:param[Type, Index] = ParamType,
   function:param[Func, Index] = Param
 ->
   variable:type[Param] = ParamType.

function:type[Func] = Type, 
   function_type:param[Type, Index] = _
 ->
   function:param[Func, Index] = _.

function:type[Func] = Type, 
   function:param[Func, Index] = _.
 ->
   function_type:param[Type, Index] = _
