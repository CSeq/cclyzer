// http://llvm.org/docs/LangRef.html#landingpad-instruction
// keywords: exception; instruction

landingpad_instruction(Insn) -> instruction(Insn).
landingpad_instruction:cleanup(Insn) -> landingpad_instruction(Insn).

// result type
landingpad_instruction:type[Insn] = Type ->
   landingpad_instruction(Insn), type(Type).

// personality function
landingpad_instruction:pers_fn[Insn] = Func -> 
   landingpad_instruction(Insn), immediate(Func).

/////////////////
// Landing Pad //
/////////////////

landingpad(BB) -> basicblock(BB).
landingpad(BB) <-
   invoke_instruction:exception_label[_] = Label,
   basicblock:by_label[Label] = BB.

landingpad:phi(BB, Insn) <-
   basicblock:first[BB] = Insn,
   landingpad(BB),
   phi_instruction(Insn).

landingpad:phi(BB, Insn) <-
   instruction:next[Prev] = Insn,
   landingpad:phi(BB, Prev),
   instruction:basicblock[Prev] = BB,
   instruction:basicblock[Insn] = BB,
   phi_instruction(Insn).

landingpad:firstnonphi[BB] = Insn <-
   basicblock:first[BB] = Insn,
   landingpad(BB),
   !phi_instruction(Insn).

landingpad:firstnonphi[BB] = Insn <-
   instruction:next[Prev] = Insn,
   landingpad:phi(BB, Prev),
   instruction:basicblock[Prev] = BB,
   instruction:basicblock[Insn] = BB,
   !phi_instruction(Insn).

landingpad:start[BB] = Insn <-
   landingpad_instruction(Insn),
   instruction:basicblock[Insn] = BB,
   landingpad(BB). // c3


/////////////
// Clauses //
/////////////

clause(Clause) -> .
catch_clause(Clause) -> clause(Clause).
filter_clause(Clause) -> clause(Clause).

clause:by_index[Insn, Index] = Clause ->
   landingpad_instruction(Insn), int[64](Index), clause(Clause).

lang:physical:storageModel[`clause] = "ScalableSparse".
lang:constructor(`clause:by_index).

// A clause begins with the clause type — catch or filter — and 
// contains the global variable representing the “type” that may 
// be caught or filtered respectively. 
//
// Unlike the catch clause, the filter clause takes an array 
// constant as its argument.

catch_clause:arg[Clause] = Arg ->
   catch_clause(Clause), global_variable(Arg).

filter_clause:arg[Clause] = Arg ->
   filter_clause(Clause), immediate(Arg).

landingpad_instruction:clause[Insn, Index] = Clause -> 
   landingpad_instruction(Insn), int[64](Index), clause(Clause).

landingpad_instruction:nclauses[Insn] = Total -> 
   landingpad_instruction(Insn), int[64](Total).

// Constraints:
//
// The landingpad instruction has several restrictions:
//  (1) A landing pad block is a basic block which is the unwind 
//      destination of an ‘invoke‘ instruction. (See 
//      invoke-instruction.)
//  (2) A landing pad block must have a ‘landingpad‘ instruction 
//      as its first non-PHI instruction.
//  (3) There can be only one ‘landingpad‘ instruction within the 
//      landing pad block.
//  (4) A basic block that is not a landing pad block may not include 
//      a ‘landingpad‘ instruction.
//  (5) All ‘landingpad‘ instructions in a function must have the same 
//      personality function.
//  (6) The ‘landingpad‘ instruction must contain at least one clause 
//      or the cleanup flag.

filter_clause:arg[_] = Arg,
   immediate:type[Arg] = Type
 ->
   array_type(Type).

landingpad_instruction:type[Insn] = Type
 ->
   instruction:type[Insn] = Type.

landingpad_instruction:pers_fn[_] = Func,
   immediate:type[Func] = Type
 ->
   function_type(Type).

landingpad:firstnonphi[_] = Insn
 ->
   landingpad_instruction(Insn) ; 0 = 1. // c2 /TODO: remove dummy or

landingpad_instruction(Insn),
   instruction:basicblock[Insn] = BB
 ->
   landingpad(BB). // c4

landingpad_instruction:pers_fn[Insn1] = Pers,
   landingpad_instruction(Insn1),
   landingpad_instruction(Insn2),
   instruction:function[Insn1] = Func,
   instruction:function[Insn2] = Func
 ->
   landingpad_instruction:pers_fn[Insn2] = Pers. // c5


landingpad_instruction(Insn)
 ->
   landingpad_instruction:cleanup(Insn) ;
   landingpad_instruction:clause[Insn, 0] = _. // c6
