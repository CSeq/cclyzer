// http://llvm.org/docs/LangRef.html#cmpxchg-instruction
// keywords: atomic; memory; instruction

cmpxchg_instruction(Insn) -> instruction(Insn).

cmpxchg_instruction:ordering[Insn] = Ord -> 
   cmpxchg_instruction(Insn), ordering(Ord).

// If the cmpxchg is marked as volatile, then the optimizer is not allowed 
// to modify the number or order of execution of this cmpxchg with other 
// volatile operations.

cmpxchg_instruction:volatile(Insn) ->
   cmpxchg_instruction(Insn).

// There are three arguments to the cmpxchg instruction: 
//  (i)   an address to operate on, 
//  (ii)  a value to compare to the value currently be at 
//        that address, and
//  (iii) a new value to place at that address if the compared 
//        values are equal.

cmpxchg_instruction:address[Insn] = Ptr -> 
   cmpxchg_instruction(Insn), operand(Ptr).

cmpxchg_instruction:cmp[Insn] = Cmp -> 
   cmpxchg_instruction(Insn), operand(Cmp).

cmpxchg_instruction:new[Insn] = New -> 
   cmpxchg_instruction(Insn), operand(New).

// Auxiliary
cmpxchg_instruction:type[Insn] = Type -> 
   cmpxchg_instruction(Insn), type(Type).

// Constraints:
//  (i)   the type of ‘<cmp>’ must be an integer type
//  (ii)  ‘<cmp>’ and ‘<new>’ must have the same type, and 
//  (iii) the type of ‘<pointer>’ must be a pointer to that type  
//  (iv)  the original value at the location is returned.

cmpxchg_instruction(Insn) -> cmpxchg_instruction:ordering[Insn] = _.
cmpxchg_instruction(Insn) -> cmpxchg_instruction:address[Insn] = _.
cmpxchg_instruction(Insn) -> cmpxchg_instruction:cmp[Insn] = _.
cmpxchg_instruction(Insn) -> cmpxchg_instruction:new[Insn] = _.

// !! We will encode the above constraints as 
// functional violations to our auxiliary 
// predicate !!

cmpxchg_instruction:type[Insn] = Type <-
   cmpxchg_instruction:cmp[Insn] = Operand, 
   operand:type[Operand] = Type.

cmpxchg_instruction:type[Insn] = Type <-
   cmpxchg_instruction:new[Insn] = Operand, 
   operand:type[Operand] = Type.

cmpxchg_instruction:type[Insn] = Comp <-
   cmpxchg_instruction:address[Insn] = Ptr, 
   operand:type[Ptr] = Type,
   pointer_type:component[Type] = Comp.

cmpxchg_instruction:type[Insn] = Type <-
   cmpxchg_instruction(Insn),
   instruction:type[Insn] = Type.

cmpxchg_instruction:type[_] = Type
 -> 
   integer_type(Type) ; 0 = 1. // TODO: check if this dummy or can be avoided in future versions

cmpxchg_instruction:address[_] = Ptr
 -> 
   operand:pointer(Ptr).
