heap_allocation:by_type_instruction[Type, Insn] = HeapAlloc ->
   type(Type), instruction(Insn), heap_allocation(HeapAlloc).

lang:constructor(`heap_allocation:by_type_instruction).


// Mark all heap allocations that do not carry any type information

untyped_allocation(Insn, Alloc) ->
   instruction(Insn), allocation(Alloc).

untyped_allocation(Insn, Alloc) <-
   heap_allocation:by_malloc[Insn] = Alloc
 ; heap_allocation:by_calloc[Insn] = Alloc
 ; heap_allocation:by_realloc[Insn] = Alloc.


// Type indication for *untyped* allocation

type_indication(Type, ACtx, Alloc) ->
   type(Type), alloc_context(ACtx), allocation(Alloc).


// Only bitcast instructions are considered type indications for now

type_indication(Type, ACtx, Alloc) <-
   bitcast_instruction:to_type[Instr] = PtrType,
   bitcast_instruction:from[Instr] = FromOperand,
   instruction:function[Instr] = InstrFunc,
   reachable_context(Ctx, InstrFunc),
   operand_points_to(ACtx, Alloc, Ctx, FromOperand),
   untyped_allocation(AllocInstr, Alloc),
   !sized_alloc_instr[AllocInstr] = _,
   pointer_type:component[PtrType] = Type.

type_indication(Type, ACtx, Alloc) <-
   reachable_instruction(Instr),
   bitcast_instruction:to_type[Instr] = PtrType,
   bitcast_instruction:from[Instr] = FromOperand,
   instruction:function[Instr] = InstrFunc,
   reachable_context(Ctx, InstrFunc),
   operand_points_to(ACtx, Alloc, Ctx, FromOperand),
   untyped_allocation(AllocInstr, Alloc),
   pointer_type:component[PtrType] = Type,
   sized_alloc_instr[AllocInstr] = Size,
   type:size[Type] = Size.

// In case of known size, we must also allow pointer types whose base
// component may perfectly divide the known size of the allocation.
type_indication(Type, ACtx, Alloc) <-
   reachable_instruction(Instr),
   bitcast_instruction:to_type[Instr] = PtrType,
   bitcast_instruction:from[Instr] = FromOperand,
   instruction:function[Instr] = InstrFunc,
   reachable_context(Ctx, InstrFunc),
   operand_points_to(ACtx, Alloc, Ctx, FromOperand),
   untyped_allocation(AllocInstr, Alloc),
   pointer_type:component[PtrType] = Type,
   pointer_type:base_component[PtrType] = BaseType,
   sized_alloc_instr[AllocInstr] = Size,
   type:size[BaseType] = BaseSize,
   NumElements = Size / BaseSize,
   Size = NumElements * BaseSize.


heap_allocation(TypedAlloc)
 , heap_allocation:by_type_instruction[Type, AllocInstr] = TypedAlloc
 , _assign_rebase_alloc(TypedAlloc, ACtx, Alloc, Var)
 <-
   untyped_allocation(AllocInstr, Alloc),
   type_indication(Type, ACtx, Alloc),
   instruction:to[AllocInstr] = Var.

var_points_to(ACtx, TypedAlloc, Ctx, Var) <-
   _assign_rebase_alloc(TypedAlloc, ACtx, Alloc, Var),
   var_points_to(ACtx, Alloc, Ctx, Var).

allocation:type[Alloc] = Type <-
   heap_allocation:by_type_instruction[Type, _] = Alloc.

allocation:to_string[Alloc] = Str <-
   heap_allocation:by_type_instruction[Type, Insn] = Alloc,
   instruction:to[Insn] = Var,
   variable:descriptor(Var, _, Func, _, Name),
   Str = "*typed_heap_alloc" + Func + "[" + Type + " " + Name + "]".

allocation:pos(Alloc, Line, Column) <-
   heap_allocation:by_type_instruction[_, Insn] = Alloc,
   instruction:pos(Insn, Line, Column).
