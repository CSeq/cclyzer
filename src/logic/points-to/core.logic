// Temporarily mark all functions as reachable, since the reachability
// filter is not yet enforced through all points-to relations
// reachable_function(F) <- function(F).

// Model null as a specific memory location
constant_points_to[Constant] = NULL <-
   nullptr_constant(Constant),
   null_location[] = NULL.

// TODO: model constant arrays, and constant structs

// Integers can be cast to pointers. In such case, the conservative
// approach is to assume that the pointer may point to anywhere in
// memory.
//
// Example: (int *) 0xabcd

constant_points_to[Constant] = UNKNOWN <-
   inttoptr_constant_expression(Constant),
   unknown_location[] = UNKNOWN.


// A pointer may be masqueraded into an integer (or something else),
// but the associated memory locations are still valid.

constant_points_to[IntConstant] = Alloc <-
   ptrtoint_constant_expression:from[IntConstant] = PtrConstant,
   constant_points_to[PtrConstant] = Alloc.

constant_points_to[OuterConstant] = Alloc <-
   bitcast_constant_expression:from[OuterConstant] = InnerConstant,
   constant_points_to[InnerConstant] = Alloc.

// Global variable and function references is a common type of
// constants. They should be matched to the corresponding global
// allocation.

constant_points_to[Constant] = Alloc <-
   global_variable_constant:name[Constant] = Name,
   global_allocation:by_variable[GVar] = Alloc,
   global_variable:by_name[Name] = GVar.

constant_points_to[Constant] = Alloc <-
   function_constant:function_name[Constant] = FName,
   function:by_name[FName] = Func,
   global_allocation:by_function[Func] = Alloc.


//----------------------------------------------------------------------
// [Assignment Instructions]
//
// There are many types of instructions that essentially copy the
// points-to set of a variable to another.
//
// Cast instructions such as `bitcast` fall to this category. Often
// the returned type of a `@malloc` function call is different than
// the declared type of the target variable. The LLVM IR adds a
// temporary variable of type `i8*` to hold the result and then an
// intermediate `bitcast` instruction that casts this temporary
// variable to the right type.
//
// Another class of assignment instructions are the interprocedural
// assignments. This way we can model the implicit flow from (i) the
// actual arguments to the formal parameters, and from (ii) the return
// value of the called function to the variable that is assigned the
// result of the `call instruction`.
//----------------------------------------------------------------------

assign_instruction(To, Value) ->
   variable(To), operand(Value).

var_points_to(Alloc, ToVar) <-
   assign_instruction(ToVar, Value),
   operand_points_to(Alloc, Value).

// `bitcast` instructions
assign_instruction(ToVar, Value) <-
   reachable_instruction(Insn),
   bitcast_instruction:from[Insn] = Value,
   instruction:to[Insn] = ToVar.

// `ptrtoint` instructions
assign_instruction(ToVar, Value) <-
   reachable_instruction(Insn),
   ptrtoint_instruction:from[Insn] = Value,
   instruction:to[Insn] = ToVar.

// `inttoptr` instructions
var_points_to(Unknown, ToVar) <-
   unknown_location[] = Unknown,
   reachable_instruction(Insn),
   inttoptr_instruction(Insn),
   instruction:to[Insn] = ToVar.

// `phi` instructions: treat every possible pair value as a potential
// assignment to the target variable
assign_instruction(ToVar, Value) <-
   reachable_instruction(Insn),
   phi_instruction:pair:value[Insn, _] = Value,
   instruction:to[Insn] = ToVar.


// `select` instructions; similar to `phi` instructions
assign_instruction(ToVar, Value) <-
   reachable_instruction(Insn),
   select_instruction(Insn),
   ( select_instruction:first_operand[Insn]  = Value
   ; select_instruction:second_operand[Insn] = Value ),
   instruction:to[Insn] = ToVar,
   instruction:type[Insn] = Type,
   !vector_type(Type).

// // A simple field-insensitive approach (just ignore indices of
// // `getelementptr`)
//
// assign_instruction(ToVar, Base) <-
//    getelementptr_instruction:base[Insn] = Base,
//    instruction:to[Insn] = ToVar.


// TODO: support `cmpxchg` and `atomicrmw` instructions
// TODO: support `invoke` and `landingpad` instructions


//---------------------------------------
//  [Interprocedural Logic]
//---------------------------------------

// Flow of actual arguments regardless of instruction type
function:actual_arg(Callee, Index, Argument) ->
   function(Callee), int[64](Index), operand(Argument).

function:actual_arg(Callee, Index, Argument) <-
   call_instruction:arg[CallInsn, Index] = Argument,
   callgraph:edge(Callee, CallInsn),
   function(Callee).

function:actual_arg(Callee, Index, Argument) <-
   invoke_instruction:arg[InvokeInsn, Index] = Argument,
   callgraph:edge(Callee, InvokeInsn),
   function(Callee).

// Identify variable arguments for variadic functions
function:va_actual_arg(Callee, Index, Argument) <-
   function:actual_arg(Callee, Index, Argument),
   function:type[Callee] = Type,
   function_type:varargs(Type),
   function_type:nparams[Type] = N,
   Index >= N.

// actual arg to formal parameter
assign_instruction(Param, Argument) <-
   function:actual_arg(Callee, Index, Argument),
   function:param[Callee, Index] = Param.

// `return` instruction to `call` instruction target
assign_instruction(ToVar, RetValue) <-
   call_instruction(CallInsn),  // do not model `invoke` instructions yet
   callgraph:edge(Callee, CallInsn),
   ret_instruction:value[RetInsn] = RetValue,
   instruction:function[RetInsn] = Callee,
   instruction:to[CallInsn] = ToVar.


// `va_arg` instruction
//
// TODO: model target-specific value `va_list` and calls to related
// LLVM intrinsic functions. Right now this may produce nothing

assign_instruction(ToVar, Argument) <-
   va_arg_instruction:type[VArgInsn] = ArgType,
   instruction:to[VArgInsn] = ToVar,
   instruction:function[VArgInsn] = Callee,
   function:va_actual_arg(Callee, _, Argument),
   operand:type[Argument] = ArgType.


// Augment call-graph by adding edges for function pointers

function:by_location[Alloc] = Callee <-
   global_allocation:by_function[Callee] = Alloc.

callgraph:edge(Callee, CallerInsn), reachable_function(Callee)
 <-
   reachable_instruction(CallerInsn),
   indirect_call_instruction(CallerInsn),
   call_instruction:raw_function[CallerInsn] = Op,
   operand_points_to(Alloc, Op),
   function:by_location[Alloc] = Callee,
   function(Callee),
   function:type[Callee] = ActualType,
   operand:type[Op] = OpType,
   pointer_type:component[OpType] = DeclaredType,
   type_compatible(ActualType, DeclaredType).

// Augment call-graph by adding edges for `invoke` instructions

callgraph:edge(Callee, CallerInsn), reachable_function(Callee)
 <-
   reachable_instruction(CallerInsn),
   invoke_instruction(CallerInsn),
   invoke_instruction:function[CallerInsn] = Op,
   operand_points_to(Alloc, Op),
   function:by_location[Alloc] = Callee,
   function(Callee),
   function:type[Callee] = ActualType,
   operand:type[Op] = OpType,
   pointer_type:component[OpType] = DeclaredType,
   type_compatible(ActualType, DeclaredType).


// The following rule augments the logic about identifying functions
// registered to run at program at exit, so that it also works with
// function pointers.

reachable_function(Callback) <-
   callgraph:edge(AtExit, Insn),
   function:name[AtExit] = "@atexit",
   call_instruction:arg[Insn, 0] = Operand,
   operand_points_to(Alloc, Operand),
   function:by_location[Alloc] = Callback.


//----------------------------------------------------------------------
// [Load/Store Instructions]
//----------------------------------------------------------------------

ptr_points_to(Alloc, BaseAlloc) <-
   reachable_instruction(Insn),
   store_instruction:value[Insn] = Op,
   store_instruction:address[Insn] = PtrOp,
   operand_points_to(Alloc, Op),
   operand_points_to(BaseAlloc, PtrOp).

var_points_to(Alloc, ToVar) <-
   reachable_instruction(Insn),
   instruction:to[Insn] = ToVar,
   load_instruction:address[Insn] = PtrOp,
   operand_points_to(BaseAlloc, PtrOp),
   ptr_points_to(Alloc, BaseAlloc).
