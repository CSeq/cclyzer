//----------------------------------------------------------------------
// [Heap and Stack Allocations]
//
// Every named variable of the original source code will have a
// corresponsing `alloca_instruction` that allocates space for it in
// the stack. Hence, we can use these instructions to track stack
// allocations.
//
// Heap allocations on the other side will be created primarily by
// calling the `@malloc` function. More heap allocation functions
// could be added in the future.
//----------------------------------------------------------------------

stack_allocation(StackAlloc),
stack_allocation:by_instruction[Insn] = StackAlloc,
var_points_to(StackAlloc, Var)
 <-
   alloca_instruction(Insn),
   instruction:to[Insn] = Var.

heap_allocation(HeapAlloc),
heap_allocation:by_instruction[Insn] = HeapAlloc,
var_points_to(HeapAlloc, Var)
 <-
   call_instruction:function[Insn] = Func,
   function:name[Func] = "@malloc",
   instruction:to[Insn] = Var.

global_allocation(Alloc),
global_allocation:by_variable[GVar] = Alloc
 <-
   global_variable(GVar).

global_allocation(Alloc),
global_allocation:by_function[Func] = Alloc
 <-
   function(Func).


// We also create allocations of functions for which we lack any
// definition, e.g., functions that belong to dynamically linked
// libraries

global_allocation(Alloc),
global_allocation:by_function[Func] = Alloc
 <-
   function_decl(Func),
   !function:definition[Func] = _.


// Integers can be cast to pointers. In such case, the conservative
// approach is to assume that the pointer may point to anywhere in
// memory.
//
// Example: (int *) 0xabcd

constant:contains_alloc(Unknown, Constant) <-
   inttoptr_constant_expression(Constant),
   unknown_location[] = Unknown.


// A pointer may be masqueraded into an integer, but the associated
// memory locations are still valid.

constant:contains_alloc(Alloc, IntConstant) <-
   ptrtoint_constant_expression:from[IntConstant] = PtrConstant,
   constant:contains_alloc(Alloc, PtrConstant).

// Global variable and function references is a common type of
// constants. They should be matched to the corresponding global
// allocation.

constant:contains_alloc(Alloc, Constant) <-
   global_variable_constant:name[Constant] = Name,
   global_allocation:by_variable[GVar] = Alloc,
   global_variable:by_name[Name] = GVar.

constant:contains_alloc(Alloc, Constant) <-
   function_constant:function_name[Constant] = FName,
   function:by_name[FName] = Func,
   global_allocation:by_function[Func] = Alloc.


//----------------------------------------------------------------------
// [Assignment Instructions]
//
// There are many types of instructions that essentially copy the
// points-to set of a variable to another.
//
// Cast instructions such as `bitcast` fall to this category. Often
// the returned type of a `@malloc` function call is different than
// the declared type of the target variable. The LLVM IR adds a
// temporary variable of type `i8*` to hold the result and then an
// intermediate `bitcast` instruction that casts this temporary
// variable to the right type.
//
// Another class of assignment instructions are the interprocedural
// assignments. This way we can model the implicit flow from (i) the
// actual arguments to the formal parameters, and from (ii) the return
// value of the called function to the variable that is assigned the
// result of the `call instruction`.
//----------------------------------------------------------------------

assign_instruction(To, Value) ->
   variable(To), operand(Value).

var_points_to(Alloc, ToVar) <-
   assign_instruction(ToVar, Value),
   operand_points_to(Alloc, Value).

// `bitcast` instructions
assign_instruction(ToVar, Value) <-
   bitcast_instruction:from[Insn] = Value,
   instruction:to[Insn] = ToVar.

// `phi` instructions: treat every possible pair value as a potential
// assignment to the target variable
assign_instruction(ToVar, Value) <-
   phi_instruction:pair:value[Insn, _] = Value,
   instruction:to[Insn] = ToVar.

// `getelementptr` instructions (ignores indices)
// TODO model indices, arrays, fields, etc
assign_instruction(ToVar, Base) <-
   getelementptr_instruction:base[Insn] = Base,
   instruction:to[Insn] = ToVar.

// actual arg to formal parameter
assign_instruction(Param, Argument) <-
   call_instruction:function[Insn] = Callee,
   call_instruction:arg[Insn, Index] = Argument,
   function:param[Callee, Index] = Param.

// `return` instruction to `call` instruction target
assign_instruction(ToVar, RetValue) <-
   call_instruction:function[CallInsn] = Callee,
   ret_instruction:value[RetInsn] = RetValue,
   instruction:function[RetInsn] = Callee,
   instruction:to[CallInsn] = ToVar.


//----------------------------------------------------------------------
// [Load/Store Instructions]
//----------------------------------------------------------------------

ptr_points_to(Alloc, BaseAlloc) <-
   store_instruction:value[Insn] = Op,
   store_instruction:address[Insn] = PtrOp,
   operand_points_to(Alloc, Op),
   operand_points_to(BaseAlloc, PtrOp).

var_points_to(Alloc, ToVar) <-
   instruction:to[Insn] = ToVar,
   load_instruction:address[Insn] = PtrOp,
   operand_points_to(BaseAlloc, PtrOp),
   ptr_points_to(Alloc, BaseAlloc).


// Intermediate relations

operand_points_to(Alloc, Operand) ->
   allocation(Alloc), operand(Operand).

operand_points_to(Alloc, VarOperand) <-
   operand:as_variable[VarOperand] = PtrVar,
   var_points_to(Alloc, PtrVar).

operand_points_to(Alloc, ConstantOperand) <-
   operand:as_constant[ConstantOperand] = ToGVar,
   constant:contains_alloc(Alloc, ToGVar).
