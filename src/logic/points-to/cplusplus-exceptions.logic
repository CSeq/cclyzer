//------------------------------------------------------------------------------
// Exceptions - Important functions in the libc++ ABI
//------------------------------------------------------------------------------

//-------------------------------------------------------------------------
// [Exception Allocation - Memory Management]
//
// Signature:
// void* __cxa_allocate_exception(size_t thrown_size) throw();
//
// Allocates memory to hold the exception to be thrown. thrown_size is
// the size of the exception object. Can allocate additional memory to
// hold private data. If memory can not be allocated, call
// std::terminate().
//
// Returns: A pointer to the memory allocated for the exception
// object.
//-------------------------------------------------------------------------

cxx:alloc_exception[] = Func -> function_decl(Func).

cxx:alloc_exception[] = Func, heap_alloc_function(Func) <-
   function:by_name["@__cxa_allocate_exception"] = Func,
   function:type[Func] = FType,
   function_type:param[FType, 0] = Type,
   integer_type(Type),
   function_type:nparams[FType] = 1.

// Exception Object
exception_object(Alloc) -> allocation(Alloc).

// Introduce new heap allocation selector
heap_allocation:by_alloc_exc[Insn] = HeapAlloc
 , exception_object(HeapAlloc)
 <-
   cxx:alloc_exception[] = Func,
   call_instruction:function[Insn] = Func,
   heap_allocation:by_instruction[Insn] = HeapAlloc.

// Compute allocation size
sized_alloc_instr[Insn] = Size <-
   cxx:alloc_exception[] = Func,
   call_instruction:function[Insn] = Func,
   call_instruction:arg[Insn, 0] = SizeOp,
   operand:to_int[SizeOp] = Size.

// Infer its type
allocation:type[ExcObj] = Type <-
   instruction:function[AllocInsn] = InFunction,
   heap_allocation:by_alloc_exc[AllocInsn] = ExcObj,
   allocation:size[ExcObj] = Size,
   type:size[Type] = Size,
   init_by_ctor(Type, _, InFunction, ExcObj).


//-------------------------------------------------------------------------
// [Throw Function]
//
// Signature:
// void __cxa_throw(void* thrown_exception,
//                  struct std::type_info * tinfo,
//                  void (*dest)(void*));
//
// The arguments are:
//   * The address of the thrown exception object (which points to the
//     throw value, after the header, as specified above).
//   * A std::type_info pointer, giving the static type of the throw
//     argument as a std::type_info pointer, used for matching
//     potential catch sites to the thrown exception.
//   * A destructor pointer to be used eventually to destroy the
//     object.
//
// This routine never returns.
//-------------------------------------------------------------------------

cxx:throw_function[] = Func -> function_decl(Func).

cxx:throw_function[] = Func <-
   function:by_name["@__cxa_throw"] = Func,
   function:type[Func] = FType,
   function_type:param[FType, 0] = Type1,
   function_type:param[FType, 1] = Type2,
   function_type:param[FType, 2] = Type3,
   pointer_type(Type1),
   pointer_type(Type2),
   pointer_type(Type3),
   function_type:nparams[FType] = 3.


//------------------------------------------------
// * Throw Instr throws exception object
//------------------------------------------------

cxx:throw_instruction(ThrowInsn) <-
   cxx:throw_function[] = ThrowFunc,
   callgraph:inv_edge(ThrowInsn, ThrowFunc).

cxx:throw_instruction:exception(ExcObj, ThrowInsn) <-
   cxx:throw_instruction(ThrowInsn),
   ( call_instruction:arg[ThrowInsn, 0] = Exc
   ; invoke_instruction:arg[ThrowInsn, 0] = Exc ),
   operand_points_to(ExcObj, Exc).

//------------------------------------------------
// * Throw Instr associates typeinfo object
//------------------------------------------------

cxx:throw_instruction:typeinfo(ExcTypeInfo, ThrowInsn) <-
   cxx:throw_instruction(ThrowInsn),
   ( call_instruction:arg[ThrowInsn, 1] = TypeInfoArg
   ; invoke_instruction:arg[ThrowInsn, 1] = TypeInfoArg ),
   operand_points_to(TypeInfoObj, TypeInfoArg),
   _type_info_by_alloc[TypeInfoObj] = ExcTypeInfo.

_type_info_by_alloc[Obj] = ExcTypeInfo <-
   typeinfo(ExcTypeInfo),
   global_allocation:by_variable[ExcTypeInfo] = Obj.

// A typeinfo structure may have external linkage. Try to match it by
// name.

typeinfo(Var), external_typeinfo(Var) <-
   linkage_type:external[] = ExternalLinkage,
   global_variable:linkage_type[Var] = ExternalLinkage,
   global_variable:name[Var] = Name,
   string:like(Name, "@_ZTI%").


//------------------------------------------------
// * Throw Instr registers destructor
//------------------------------------------------

cxx:throw_instruction:destructor(Dtor, ThrowInsn) <-
   cxx:throw_instruction(ThrowInsn),
   ( call_instruction:arg[ThrowInsn, 2] = DtorArg
   ; invoke_instruction:arg[ThrowInsn, 2] = DtorArg ),
   operand_points_to(Alloc, DtorArg),
   function:by_location[Alloc] = Dtor.

cxx:throw_instruction:no_dtor(ThrowInsn) <-
   null_location[] = Null,
   cxx:throw_instruction(ThrowInsn),
   ( call_instruction:arg[ThrowInsn, 2] = DtorArg
   ; invoke_instruction:arg[ThrowInsn, 2] = DtorArg ),
   operand_points_to(Null, DtorArg).

//-------------------------------------------------------------------------
// The following is a generic catch-all relation that associates with
// each throw instruction multiple destructor - typeinfo - exception
// object triplets. Each triplet contains compatible elements.
//-------------------------------------------------------------------------

cxx:throws(Dtor, TypeInfo, ExcObj, ThrowInsn)
 <-
   cxx:throw_instruction:exception(ExcObj, ThrowInsn),
   cxx:throw_instruction:typeinfo(TypeInfo, ThrowInsn),
   cxx:throw_instruction:destructor(Dtor, ThrowInsn),
   ( class_type:typeinfo[Type] = TypeInfo
   ; external_typeinfo(TypeInfo) ),
   allocation:type[ExcObj] = Type,
   class_type:destructor(Dtor, Type).
