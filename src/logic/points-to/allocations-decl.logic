//-----------------------------------------------------------------------
// [Memory Abstraction]
//
// We have three types of memory allocations that a variable can point
// to:
// (i)   stack allocations,
// (ii)  heap allocations, and
// (iii) global allocations.
//
// The LLVM bitcode intermediate representation transforms every named
// variable of type `x` to a pointer to `x`, and adds an `alloca`
// instruction at the beginning of the function to allocate space for
// it, in the stack.
//
// Thus, every address-of expression of the source code now
// corresponds to an LLVM bitcode variable.
//
// For instance, the statements:
//
//     int x, *p;
//     ...
//     p = &x;
//
// will be transformed to:
//
//     i32 *x, **p;
//     x = alloca i32
//     p = alloca i32*
//     ...
//     store x, p
//
//
// Since an arbitrary number of heap allocations may happen at
// runtime, we must choose an appropriate abstraction. The most common
// choice for Andersen type analyses is abstracting an allocation by
// the instruction that allocates it. This is what we will follow here
// too.
//
//-----------------------------------------------------------------------


//-----------------------------------
// Basic Allocation Type Hierarchy
//-----------------------------------


allocation(Alloc) -> .
stack_allocation(Alloc)  -> allocation(Alloc).
heap_allocation(Alloc)   -> allocation(Alloc).
global_allocation(Alloc) -> allocation(Alloc).


// Constructors

stack_allocation:by_instruction[Insn] = StackAlloc ->
   alloca_instruction(Insn), stack_allocation(StackAlloc).

heap_allocation:by_instruction[Insn] = HeapAlloc ->
   instruction(Insn), heap_allocation(HeapAlloc).

global_allocation:by_variable[Var] = GlobalAlloc ->
   global_variable(Var), global_allocation(GlobalAlloc).

global_allocation:by_function[Func] = GlobalAlloc ->
   function_decl(Func), global_allocation(GlobalAlloc).



//-------------------------------------
// Additional pseudo-allocation types
//-------------------------------------

// This nullary predicate represents any unknown memory location.

unknown_location[] = Unknown ->
   allocation(Unknown).

// This nullary predicate represents `null`.

null_location[] = Null ->
   allocation(Null).


//--------------------------------
// Allocation properties
//--------------------------------

// Human readable representation for allocations

allocation:to_string[Alloc] = Str ->
   allocation(Alloc), string(Str).


//--------------------------------
// Constructor declarations
//--------------------------------

lang:physical:storageModel[`allocation] = "ScalableSparse".
lang:constructor(`stack_allocation:by_instruction).
lang:constructor(`heap_allocation:by_instruction).
lang:constructor(`global_allocation:by_variable).
lang:constructor(`global_allocation:by_function).
lang:constructor(`unknown_location).
lang:constructor(`null_location).
