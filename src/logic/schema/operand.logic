//------------
// Variables
//------------

variable(Var), variable:id(Var:Ref) -> string(Ref).

lang:physical:capacity[`variable] = 8388608.

variable:type[Var] = Type -> variable(Var), type(Type).

variable:label(Var) <-
   variable:type[Var] = Type,
   label_type[] = Type.

variable:pointer(Var) <-
   variable:type[Var] = Type,
   pointer_type(Type).

variable:firstclass(Var) <-
   variable:type[Var] = Type,
   type:firstclass(Type).


//--------------
// Immediates
//--------------

immediate(Imm), immediate:id(Imm:Ref) -> string(Ref).

lang:physical:capacity[`immediate] = 8388608.

immediate:type[Imm] = Type -> immediate(Imm), type(Type).
immediate:value[Imm] = Val -> immediate(Imm), string(Val).


// Auxiliary predicate that computes the last colon position of the
// immediate's refmode

immediate:last_colon_pos[Imm] = Pos ->
   immediate(Imm), uint[32](Pos).

immediate:last_colon_pos[Imm] = Pos  <-
   agg<<Pos = max(P)>> immediate:id(Imm:Ref), string:substring[Ref, P, 1] = ":".


// Compute the actual value of the immediate, since the refmode
// includes more fields in order to uniquely identify this constant
// from other that happen to have the exact same value.

immediate:value[Imm] = Val <-
   immediate:id(Imm:Ref),
   immediate:last_colon_pos[Imm] = ColonPos,
   string:length[Ref] = Len,
   string:substring[Ref, ColonPos + 1, Len - ColonPos - 1] = Val.


// Auxiliary Predicates

immediate:eq(Imm1, Imm2) <-
   immediate:value[Imm1] = Val1,
   immediate:value[Imm2] = Val2,
   Val1 = Val2. // is this enough??

immediate:ne(Imm1, Imm2) <-
   immediate(Imm1),
   immediate(Imm2),
   !immediate:eq(Imm1, Imm2).

lang:derivationType[`immediate:ne] = "Derived".

// immediates cannot be labels
schema:sanity()
 , immediate:type[_] = type
 ->
   label_type[] != type.



//--------------------------------------------------
// [Operands] as union of {variable, immediate}
//--------------------------------------------------

operand(Operand) -> .

lang:physical:capacity[`operand] = 8388608.

// Constructors
operand:by_variable[Var] = Operand  ->
   variable(Var), operand(Operand).

operand:by_immediate[Imm] = Operand ->
   immediate(Imm), operand(Operand).

lang:physical:storageModel[`operand] = "ScalableSparse".
lang:constructor(`operand:by_variable).
lang:constructor(`operand:by_immediate).


// Type predicate
operand:type[Operand] = Type <-
   operand:by_variable[Var] = Operand,
   variable:type[Var] = Type.

operand:type[Operand] = Type <-
   operand:by_immediate[Imm] = Operand,
   immediate:type[Imm] = Type.


// View predicates
operand:as_variable[Operand] = Var <-
   operand:by_variable[Var] = Operand.

operand:as_immediate[Operand] = Imm <-
   operand:by_immediate[Imm] = Operand.

// Auxiliary functions
operand:pointer(Operand) <-
   operand:type[Operand] = Type,
   pointer_type(Type).

operand:firstclass(Var) <-
   operand:type[Var] = Type,
   type:firstclass(Type).
